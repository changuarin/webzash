<?phpclass Sales extends Controller{	public function __construct()  {      parent::__construct();      ini_set('display_errors', 'yes');      date_default_timezone_set('Asia/Manila');	$this->load->helper('code');	$this->load->model('database');	$this->load->model('master_model');	$this->load->model('rsm');	$this->load->model('sales_model');  }// 20150821 -> rsm -> Cancel Branch transfer  function brtrcancel()  {  	$this->load->helper('code');  	$this->db->where('aid', $_POST['a']);  	$this->db->delete('nhgt_master.branch_transfer');  	if( !$this->db->_error_message() ):  		$res = trims("  			var a=$('#cl',parent.document).contents().find('.data');  			a.find('#{$_POST['a']}').hide('slow',function()  			{  				$(this).parent().remove();  			});  			var a=$('#cv',parent.document).contents();  			a.find('#sbt').show();  			a.find('#sbmt').val('Submit').attr('disabled',true);  			var b=a.find('.trans').css('color','grey').find('label');  			b.html('Transfer to:');  		");  	else:  		die($this->db->_error_message());  	endif;  	die($res);  }	// 20150821 -> rsm -> Inter Branch transaction (Refund and Sales)	function interBranch()	{		$this->load->helper('code');		switch($_POST['b']):		case'refund':case'sales':	  	$tobranch = str_replace(' ', '', $_POST['c']);	  	$tobranch = strtolower($tobranch);	  	$frombranch = $this->db->database;	  	$frombranch = str_replace('nhgt_', '', $frombranch);	  	$data = array(	  		'dtime' => date('Y-m-d H:i:s'),			'tobranch' => $tobranch,			'frombranch' => $frombranch,			'encby' => $this->session->userdata('user_name'),			'status' => 'forProcess',			'refid' => $_POST['a'],			'reftype' => $_POST['b']	  	);	  	$this->db->insert('nhgt_master.branch_transfer', $data);	  	if( !$this->db->_error_message() ):	    	$res = trims(	    		// Modify CV list into disabled	    		"var a=$('#cl',parent.document).contents().find('.data');	    		var d=a.find('.isSelected')	    		.removeClass('tag0')	    		.removeClass('tag1')	    		.attr('tag', 'transferred')	    		.unbind('click').removeClass('isSelected');	    		var b=d.attr('title');	    		var c=d.html();	    		d.html('Transferred to {$_POST['c']} branch<br>'+c)	    		.attr('title', 'Transferred to {$_POST['c']} branch');".	    		//Refresh CV Form	    		"var a=$('#cv',parent.document).contents();	    		a.find('#pn-table').find('tr').hide();	    		a.find('#cv-form').removeClass('{$_POST['b']}');	    		a.find('#sbt').val('');	    		a.find('#b0').val('');	    		a.find('#a0').val('');	    		a.find('#a1').attr('style','');	    		a.find('#a3').attr('style','');	    		a.find('#a4').val('');	    		a.find('#a5').val('');	    		a.find('#a5').attr('style','');				a.find('#a6').val('');				a.find('#a7').val('');				a.find('#a8').val('');				a.find('#a9').val('');	    		"	    	);	    	echo $res;	    else:	    	echo $this->db->_error_message();	    endif;	endswitch;}	// 20150805 -> rsm -> refund post adjustment	function pstadjsmnt()	{		$tmp = explode('_', $this->db->database);		$branchcode = $tmp[1];		$data = array(			'refid' => $_POST['refid'],			'transdate' => date('Y-m-d H:i:s',strtotime($_POST['date'])),			'branchcode' => $branchcode,			'cid' => $_POST['cid'],			'atype' => $_POST['atype'],			'debcre' => $_POST['dc'],			'amount' => $_POST['amount'],			'remarks' => $_POST['remarks'],			'encodeby' => $this->session->userdata('user_name'),			'status' => 'forApproval'		);		$this->db->insert('nhgt_master.refund_adjustment', $data) or $err = $this->db->_error_message();		$this->load->helper('code');		$this->load->model('rsm');		if(isset($err))			print_r($err);		else		{			$date = date('M d Y',strtotime($_POST['date']));			$uid = $this->db->insert_id();			$amount = str_replace(',', '', $_POST['amount']);			die(trims("			<script type='text/javascript'src='".base_url()."system/application/assets/js/jquery.min.js'></script>			<script>				$(document).ready(function()				{					var a=$('#ifldgr',window.opener.document).contents().find('table').find('tbody');					var b=a.find('tr');					var c=$(b[b.length-1]).css('background-color');					var d=$(b[b.length-1]).find('td');					if('{$_POST['dc']}'=='d')						var e=parseFloat($(d[d.length-1]).html()) - $amount;					else						var e=parseFloat($(d[d.length-1]).html()) + $amount;					a.append('<tr style=\"background-color:'+(c=='rgb(245, 245, 245)'?'#E7F9FF':'#F5F5F5')+';\">".				        "<td class=\"br bb spadl spadr\" title=\"\" nowrap=\"\">".				        	$this->rsm->adj_type( $_POST['atype'] )."</td>".				        "<td class=\"br bb\" align=\"right\">AD$uid</td>".				        "<td class=\"br bb\" align=\"center\">$date</td>".				        "<td class=\"br bb spadr\" align=\"right\">".				        	($_POST['dc']=='d'?$amount:'-').				        "</td>".				        "<td class=\"br bb spadr\" align=\"right\">".				        	($_POST['dc']=='c'?$amount:'-').				        "</td>".				        "<td class=\"bb spadr\" align=\"right\" style=\"font-weight:bold;\">'+e+'</td>".				    "</tr>');					window.close();				});			</script>"));		}	}	// 20150804 -> rsm -> entry form	function adjustment()	{		$this->load->model('rsm');		$this->load->helper('code');		$p['cid'] = $this->uri->segment(3);		$p['refid'] = $this->uri->segment(4);		$p['ci_name'] = $this->rsm->get_clientname( $p['cid'] );		$p['script'] = trims("			$(document).ready(function()			{				function validate()				{					if(!$('select[name=atype]').val())					{						$('.message').html('Select a Type of Entry');						$('select[name=atype]').focus();						return false;					}else					{						if(!$('select[name=dc]').val())						{							$('.message').html('Select if Debit / Credit');							$('select[name=dc]').focus();							return false;						}else						{							if(!$('input[name=amount]').val())							{								$('.message').html('Input an amount');								$('input[name=amount]').focus();								return false;							}else return true;						}					}				}				$('#b').click(function()				{					window.close();				});				$('#c').click(function()				{					if(validate())					{						if(confirm('Are you sure you want to Save this Adjustment?'))						{							$('#a').attr('action','".base_url()."index.php/sales/pstadjsmnt').submit();						}					}				});			});		");		$this->load->view("sales/form/refund_adj", $p);	}	function viewledger()  {  	$this->db->select('ci_acctno,colid');  	$this->db->where('aid', $this->uri->segment(3, ''));  	$t = $this->db->get('refund_que');  	$colids = explode('.', $t->row()->colid);		$p['data'] = '';	if(!empty($colids)):		foreach($colids as $colid):			if($colid):				$this->db->select('cid, bill_id, atmbegbal, amtdrawn, directpaid, duedate');				$this->db->where('duedate >=', '2016-01-01');				$this->db->where('uid',$colid);				$u = $this->db->get('collection_entry');								if($u->num_rows()):					$p['data'][] = array(						'acctno'=> $u->row()->cid,						'pnno'	=> 'COLLECTION',						'date'  => date('M d Y',strtotime($u->row()->duedate)),						'debit' => 0,						'credit'=> $u->row()->amtdrawn - $u->row()->directpaid,						'billid'=> 'TR'.$colid					);					$billids = explode('.', $u->row()->bill_id);					foreach($billids as $billid):						if($billid):							$this->db->select('CI_AcctNo, LH_PN, amtodrawn, billdate, status');							$this->db->where('bill_id', $billid);							$this->db->where('billdate >=', '2016-01-01');							$v = $this->db->get('nhgt_bills.header')->row();							if($v->status == null):								$p['data'][] = array(									'acctno'=> $v->CI_AcctNo,									'pnno'	=> $v->LH_PN,									'date'	=> date('M d Y',strtotime($v->billdate)),									'credit'=> 0,									'debit' => $v->amtodrawn,									'billid'=> 'BL'.$billid								);							endif;						endif;					endforeach;				endif;			endif;		endforeach;	endif;  	$this->load->model('rsm');  	$tmp = explode('_', $this->db->database);  	$branchcode = $tmp[1];  	$this->db->where('cid', $t->row()->ci_acctno);	$this->db->where('branchcode', $branchcode);	$this->db->where('refid', $this->uri->segment(3, '') );	$this->db->order_by('uid');	$datas = $this->db->get('nhgt_master.refund_adjustment')->result_array();	if(!empty($datas)):		foreach($datas as $d):			$p['data'][] = array(				'acctno'=> $t->row()->ci_acctno,				'pnno'	=> $this->rsm->adj_type( $d['atype'] ),				'date'	=> date('M d Y',strtotime($d['transdate'])),				'credit'=> ($d['debcre']=='c'?$d['amount']:0),				'debit' => ($d['debcre']=='d'?$d['amount']:0),				'billid'=> 'AD'.$d['uid']			);		endforeach;	endif;  	$this->load->view('sales/view/ledger', $p);  }  function viewledgerque()  {  	$colids = explode('.', $this->uri->segment(3, ''));  	foreach($colids as $colid):  		if($colid):	    	$this->db->select('cid, bill_id, atmbegbal, amtdrawn, directpaid, duedate');	    	$this->db->where('uid',$colid);	    	$u = $this->db->get('collection_entry');	    	if($u->num_rows()):	    		$p['data'][] = array(		    		'acctno'=> $u->row()->cid,		    		'pnno'	=> 'COLLECTION',		    		'date'  => date('M d Y',strtotime($u->row()->duedate)),		    		'debit' => 0,		    		'credit'=> $u->row()->amtdrawn - $u->row()->directpaid,		    		'billid'=> 'TR'.$colid		    	);	    		$billids = explode('.', $u->row()->bill_id);	    		foreach($billids as $billid):	    			if($billid):		    			$this->db->select('CI_AcctNo, LH_PN, amtodrawn, billdate, status');				    	$this->db->where('bill_id', $billid);				    	$v = $this->db->get('nhgt_bills.header')->row();						if($v->status == null):							$p['data'][] = array(								'acctno'=> $v->CI_AcctNo,								'pnno'	=> $v->LH_PN,								'date'	=> date('M d Y',strtotime($v->billdate)),								'credit'=> 0,								'debit' => $v->amtodrawn,								'billid'=> 'BL'.$billid							);						endif;				    endif;	    		endforeach;	    	endif;	    endif;  	endforeach;    	  	$this->load->view('sales/view/ledger', $p);  }	function get_butal_balance( $acctno )  {  	$a = $this->db->query(  		"SELECT SUM(credit)-SUM(debit) AS total  		FROM refund_balance  		WHERE ci_acctno='$acctno'  		AND status='confirmed';  	");  	if($a->num_rows()) return $a->row()->total;  	else return 0;  }  function insertDisburse()  {  	$this->load->helper('code');	$this->load->model('rsm');		$entries = json_decode( $_POST['entries'] );	$this->db->trans_start();			$this->db->select("cvdtlno");		$this->db->order_by('cvdtlno', 'DESC');		$this->db->limit(1);		$query = $this->db->get("tbl_cvheadr");		if($query)		{			if($query->num_rows() == 0)			{				$nextCvdtl = 1;			} else			{				$q = $query->row();				$nextCvdtl = $q->cvdtlno + 1;			}		}		$this->db->select("value");		$this->db->where("code", 'BRANCH');		$param = $this->db->get("parameter")->row();				$branch = $param->value;		$branch = explode(';', $branch);		$newCV = array(			'cvdtlno'  => $nextCvdtl,			'bcode'	   => $branch[0],			'cvno'	   => $_POST['a1'], // CV No.			'payee'	   => $_POST['a0'],			'ckno'	   => $_POST['a3'], // Check No.			'cvdate'   => date('Y-m-d', strtotime($_POST['a2'])),			'ckamount' => $_POST['a4'], // Amount			'pnno'	   => '',			'cvtype'   => 'D', // D for Disbursement			'bankid'   => $_POST['a7'],			'remarks'  => $_POST['a8']		);		$this->db->insert('tbl_cvheadr', $newCV) or		die('line: 54 '.$this->db->_error_message());				/** Accounting Entries **/		$datenow = date('Y-m-d H:i:s');		$lastentryid = $this->rsm->get_last_entryid();		$credit = 0; $debit = 0;		foreach( $entries as $entry )		{			$entryinsert = array(				'entry_id'  => $lastentryid,				'ledger_id' => $this->rsm->chartaccount_id( $entry->code ),				'dc'        => ($entry->debit=='-'?'C':'D'),				'amount'    => ($entry->debit=='-'?$entry->credit:$entry->debit)			);			$this->db->insert("entry_items", $entryinsert) or			die('line: 74 '.$this->db->_error_message());							if($entry->debit=='-'):							$credit+=$entry->credit;			else:				$debit+=$entry->debit;			endif;		}				$datas = array(			'id'		 => $lastentryid,			'entry_type' => 4,					// Disbursement			'reference'  => '',			'number'     => $this->rsm->get_entry_number( 4 ),			'date'       => $datenow,			'dr_total'   => $debit,			'cr_total'   => $credit,			'narration'  => $_POST['a8']		);		$this->db->insert("entries", $datas) or		die('line: 101 '.$this->db->_error_message());		$this->db->trans_complete();		die(trims("		<script>			window.parent.document.location.href='checkvoucher';		</script>	"));  }    function disentry()  {	$this->load->view("sales/list/disbursemententry");	return;  }  function atlist()  {  	$param['datas'] = array();		$this->db->select('id,code,name');  	$param['datas'] = $this->db->get('ledgers')->result_array();		$this->load->view("sales/list/disbursement", $param);	return;  }  function listdue()	{		$this->load->helper('code');		$param['datas'] = $this->db->query(			"SELECT ci_acctno,				pnno, refunddue,				ci_bankbranch,				transtype,				ci_name,				queno,				queby,				aid,				status			FROM refund_que			WHERE status='approved'			ORDER BY queno ASC;		")->result_array();		$this->load->view("sales/list/refund_due", $param);		return;	}	function refapp()	{		if($_POST['b']=='CV'):			$this->db->set('status', 'approved');			$this->db->where('aid', $_POST['a']);			$this->db->update('refund_que');			if( $this->db->_error_message()=='' )				echo"var b=a.find('td');				$(b[4]).attr('colspan',2).html('<b><small>* FOR VOUCHER *</small></b>').attr('align','center');				$(b[5]).remove();self.close();";			else echo"alert('{$this->db->_error_message()}');";		elseif($_POST['b']=='RF'):			$this->db->trans_start();					$this->db->where('aid', $_POST['a']);			$qr = $this->db->get('refund_que') or die( $this->db->_error_message() );			$now = date('Y-m-d H:i:s');			$accountno = '';			$transdate = '';			$pnno = '';			$bankacctno = '';			$branchcode = '';			$loantype = '';			$remarks = '';			$amount = 0;			$transrefno = '';			$atmend = str_replace(',','',$_POST['c']);			if($qr->num_rows()):				$accountno = $qr->row()->ci_acctno;				$pnno = $qr->row()->pnno;				$transdate = $qr->row()->transdate;				$amount = $qr->row()->refunddue + $qr->row()->advrefund;				$remarks = $qr->row()->remarks;				$transrefno = $qr->row()->transrefno;			endif;			$this->db->select('LH_BankAcctNo, LH_BranchCode, LH_LoanType');			$this->db->where('ci_acctno', $accountno);			$this->db->where('lh_pn', $pnno);			$qr = $this->db->get('ln_hdr') or die( $this->db->_error_message() );			if($qr->num_rows()):				$bankacctno = $qr->row()->LH_BankAcctNo;				$branchcode = $qr->row()->LH_BranchCode;				$loantype = $qr->row()->LH_LoanType;			endif;			$this->db->select('ID');			$this->db->order_by('ID','DESC');			$this->db->limit(1);			$this->db->where('CI_AcctNo', $accountno);			$this->db->where('LH_PN', $pnno);			$qr = $this->db->get('ln_ldgr') or die( $this->db->_error_message() );			$ldgrid = 1;			if($qr->num_rows()):				$ldgrid = $qr->row()->ID + 1;			endif;			$newPost = array(				'ID'					  => $ldgrid,				'CI_AcctNo'				  => $accountno,				'LH_BranchCode_Processed' => $branchcode,				'LH_BankAcctNo'			  => $bankacctno,				'LH_PN'					  => $pnno,				'LH_LoanType'			  => $loantype,				'RFW_NO'				  => 'RFP#'.$transrefno,				'LL_Rebates'			  => 0,				'LL_InterestAmt'		  => 0,				'LL_AmountCheck'		  => 0,				'LL_AmountCash'			  => 0,				'LL_AmountCash_Payment'	  => 0,				'LL_ShortPayment'		  => 0,				'LL_Refund'				  => $amount,				'LL_Remarks'			  => $remarks,				'LL_PaymentDate'		  => date('Y-m-d', strtotime($transdate)),				'LL_Processed'			  => 1,				'LL_ProcessedDate'		  => date('Y-m-d H:i:s', strtotime($now)),				'LL_ProcessedBy'		  => $this->session->userdata('user_name'),				'LL_PaymentType'		  => '',				'LL_IsPayment'			  => 0,				'LL_IsRFW'				  => 1,				'LL_IsRefund'			  => 1,				'LL_CM'					  => 0,				'LL_IsBounceCheck'		  => 0,				'LL_IsUncollected'		  => 0,				'LL_IsShortPayment'		  => 0,				'LL_IsDeleted'			  => 0,				'LL_Posted_BySales'		  => 0,				'LL_Posted_ByAcct'		  => 0,				'LL_IsAdded'			  => 1,				'LL_IsModified'			  => 0			);			$this->db->insert('ln_ldgr', $newPost) or die( $this->db->_error_message() );			$this->db->set('status', 'done');			$this->db->where('aid', $_POST['a']);			$this->db->update('refund_que') or die( $this->db->_error_message() );			// this is for butal balance included in the RFP			// get butal balance			$qbb = $this->db->query(				"SELECT SUM(credit)-SUM(debit) AS total				FROM refund_balance				WHERE ci_acctno='$accountno'				AND status='confirmed';			");			$butalbalance = 0;			if($qbb->num_rows()):				$butalbalance = $qbb->row()->total;			endif;		// is have butal balance included.			if( $butalbalance ):								$datas = array(					'transdate'=>date('Y-m-d H:i:s'),					'aid'=> 0,					'ci_acctno'=> $accountno,					'debit'=> $butalbalance,					'credit'=> 0,					'status'=> 'confirmed',					'encby'=>$this->session->userdata('user_name')				);				$this->db->insert('refund_balance', $datas) or				die('line: 2275 '.$this->db->_error_message());			endif;			if(($atmend-$amount) > 0):				// if have butal do this				$datas = array(					'transdate'=>date('Y-m-d H:i:s'),					'aid'=> $_POST['a'],					'ci_acctno'=> $accountno,					'debit'=> 0,					'credit'=> ($atmend-$amount),					'status'=> 'confirmed',					'encby'=>$this->session->userdata('user_name')				);				$this->db->insert('refund_balance', $datas) or die( 'Error: 263' );			endif;		// Adjustment Update			$tmp = explode('_', $this->db->database);			$branchcode = $tmp[1];			$this->db->set('status', 'confirmed');			$this->db->where('refid', $_POST['a']);			$this->db->where('branchcode', $branchcode);			$this->db->where('cid', $accountno);			$this->db->where('status', 'forApproval');			$this->db->update('nhgt_master.refund_adjustment');			$this->db->trans_complete();			if( $this->db->_error_message()=='' )				echo'a.hide("slow",function(){$(this).remove();self.close();});';			else echo"alert('{$this->db->_error_message()}');";		endif;	}  function refappcan()	{		$this->db->trans_start();		$this->db->select('ci_acctno');		$this->db->where('aid', $this->input->post('a'));		$acctno = $this->db->get('refund_que')->row()->ci_acctno;		$tmp = explode('_', $this->db->database);		$branchcode = $tmp[1];		$this->db->set('status', 'Disapprove');		$this->db->where('refid', $this->input->post('a'));		$this->db->where('branchcode', $branchcode);		$this->db->where('cid', $accountno);		$this->db->where('status', 'forApproval');		$this->db->update('nhgt_master.refund_adjustment');		$this->db->where('aid',$this->input->post('a'));		$this->db->delete('refund_que');		$this->db->trans_complete();		if( $this->db->_error_message()=='' )			echo'a.hide("slow",function(){$(this).remove();self.close();});';		else echo"alert('{$this->db->_error_message()}');";	}  function printform()  {  	$this->load->view('sales/form/printform');  }	function refundcancel()	{		$this->db->where('aid',$this->input->post('a'));		$this->db->delete('refund_que');		if( $this->db->_error_message()=='' )			echo'a.parent().parent().hide("slow",function(){$(this).remove()});';		else echo"alert('{$this->db->_error_message()}');";	}	function refunda()	{		$this->load->helper('code');		$p['trid'] = $this->uri->segment(3);		$p['queno'] = $this->get_queno();		$p['data'] = $this->db->query(			"SELECT *			FROM refund_que			WHERE aid={$p['trid']};		")->row();		$p['script'] = trims("			$(document).ready(function()			{				$('#f').click(function()				{					if(confirm('Are you sure you want to Approve this transaction?'))					{						var a=$('#tr{$p['data']->queno}',window.opener.document);						$.post('".base_url()."index.php/sales/refapp',						{'a':'{$p['data']->aid}','b':'{$p['data']->cvrf}','c':$('#b').val()},						function(b){							eval(b);						});					}				});				$('#g').click(function()				{					if(confirm('Are you sure you want to Disapprove this transaction?'))					{						var a=$('#tr{$p['data']->queno}',window.opener.document);						$.post('".base_url()."index.php/sales/refappcan',						{'a':'{$p['data']->aid}'},						function(b){							eval(b);						});					}				});				$('#i').popupWindow({ 					centerBrowser: 1,					windowName: 'form2',					windowURL: '".base_url()."index.php/sales/adjustment/{$p['data']->ci_acctno}/{$p['trid']}',					width: 400,					height: 330				});							$('#ifldgr').attr('src','../viewledger/{$p['data']->aid}');			});		");		$tmp=explode('.', $p['data']->colid);		if(count($tmp)>1):			$p['atmendbal'] = 0;			foreach ($tmp as $id)			{				$data = $this->db->query(					"SELECT						uid AS refid,						cid AS clientcode,						duedate,						atmbegbal,						amtdrawn,						atmendbal,						bill_id					FROM collection_entry					WHERE uid=$id;				")->row();				$p['mdatas'][] = $data;				$p['atmendbal'] += isset($data->atmendbal)?$data->atmendbal:0;			}			$p['butal'] = isset($data->clientcode)?$this->get_butal_balance( $data->clientcode ):0;						$this->load->view("sales/form/refund_app", $p);		else:			$this->db->select('atmendbal');			$this->db->where('uid', $p['data']->colid);			$qr = $this->db->get('collection_entry');			$p['atmendbal'] = $qr->row()->atmendbal;			$p['butal'] = $this->get_butal_balance( $p['data']->ci_acctno );			$this->load->view("sales/form/refund_app", $p);		endif;		return;	}		function refundq()	{		$p['trid'] = $this->uri->segment(3);		$p['ptype'] = $this->uri->segment(4);		$p['queno'] = $this->get_queno();				$tmp = explode('.',$p['trid']);				if(count($tmp) > 1)		{			$p['data'] = new stdClass();			foreach ($tmp as $id)			{				$data = $this->db->query(					"SELECT						uid AS refid,						cid AS clientcode,						duedate,						atmbegbal,						amtdrawn,						atmendbal,						bill_id					FROM collection_entry					WHERE uid=$id;				")->row();					if(!isset($p['data']->name)):					$q = $this->db->query(						"SELECT							CONCAT(CI_LName, ', ', CI_FName, ' ', CI_MName) AS clientname						FROM client						WHERE CI_AcctNo='{$data->clientcode}';					")->row();						$p['data']->clientcode = $data->clientcode;					$p['data']->name = $q->clientname;				endif;				$p['pnno'] = '';							if($data->bill_id):					$tmp = substr($data->bill_id,0,strlen($data->bill_id)-1);					$tmp = explode('.', $tmp);					$tmp = $this->get_param(1, $tmp[count($tmp)-1]);					$p['pnno'] = $tmp->pnno;				endif;				$p['mdatas'][] = $data;			}			$p['butal'] = number_format( $this->get_butal_balance( $p['data']->clientcode ), 2);			$this->load->view("sales/form/refundq_mltpl", $p);		}		else		{			$p['data'] = $this->db->query(				"SELECT					b.uid AS refid,					b.cid AS clientcode,					b.atmbegbal,					b.amtdrawn,					b.atmendbal,					b.bill_id,					CONCAT(a.CI_LName, ', ', a.CI_FName, ' ', a.CI_MName) AS clientname				FROM collection_entry b, client a				WHERE a.CI_AcctNo = b.cid					AND b.uid={$p['trid']};			")->row();			$p['pnno'] = '';						if($p['data']->bill_id):				$tmp = substr($p['data']->bill_id,0,strlen($p['data']->bill_id)-1);				$tmp = explode('.', $tmp);				$tmp = $this->get_param(1, $tmp[count($tmp)-1]);				$p['pnno'] = $tmp->pnno;			endif;			$p['butal'] = number_format( $this->get_butal_balance( $p['data']->clientcode ), 2);			$this->load->view("sales/form/refund_que", $p);		}	}		function isRefundQue($var)	{		$tmps = $this->db->query(			"SELECT queno, status			FROM refund_que			WHERE colid = '$var';		");		if($tmps->num_rows())		{			if($tmps->row()->status=='ok'||$tmps->row()->status=='done')			{				$res = array(					'class'=>'done',					'value'=>''				);			}			elseif($tmps->row()->status=='approved')			{				$res = array(					'class'=>'forvoucher',					'value'=>'<b><small>* FOR VOUCHER *</small></b>'				);			}			elseif($tmps->row()->status=='draft')			{				$res = array(					'class'=>'que',					'value'=>$tmps->row()->queno				);						}			return $res;		}		else		{			$tmps = $this->db->query(				"SELECT queno, status				FROM refund_que				WHERE colid LIKE '$var.%'				OR colid LIKE '%.$var.%'				OR colid LIKE '%.$var%';			");			if($tmps->num_rows())			{				if($tmps->row()->status=='ok'||$tmps->row()->status=='done')				{					$res = array(						'class'=>'done',						'value'=>''					);				}				elseif($tmps->row()->status=='approved')				{					$res = array(						'class'=>'forvoucher',						'value'=>'<b><small>* FOR VOUCHER *</small></b>'					);				}				elseif($tmps->row()->status=='draft')				{					$res = array(						'class'=>'que',						'value'=>$tmps->row()->queno					);							}				return $res;			}		}	}		function get_colid( $clientcode )	{		$this->db->select('uid, atmendbal');		$this->db->where('cid', $clientcode);		$t = $this->db->get('collection_entry');		if($t->num_rows()):			$t=$t->result_array();			$w['colid'] = '';			$w['isQ'] = '';			$w['amount'] = 0;			foreach($t as $u):				$v = $this->isRefundQue( $u['uid'] );				if($v['class']!='done')				{					$w['colid'] .= $u['uid'].'.';					$w['amount'] += $u['atmendbal'];				}				$w['isQ'] = $v;			endforeach;			$w['colid'] = substr($w['colid'], 0, strlen($w['colid'])-1);			return $w;		else:			return FALSE;		endif;	}		function list4refund()	{		$this->load->helper('code');		$this->load->model('database');		$tmps = $this->db->query(			"SELECT CONCAT(a.CI_LName, ', ', a.CI_FName, ' ', a.CI_MName) AS name,				a.CI_AcctNo AS clientid, b.bill_id, b.atmendbal, b.duedate			FROM client a, collection_entry b			WHERE a.CI_AcctNo = b.cid			AND a.CI_IsDeleted != 1			GROUP BY a.CI_AcctNo			ORDER BY a.CI_LName,				a.CI_FName;		")->result_array();		$param['datas'] = array();		if(count($tmps)):			foreach($tmps as $data)			{				$tmp = substr($data['bill_id'],0,strlen($data['bill_id'])-1);				$tmp = explode('.', $tmp);				$var = $this->get_param(1, $tmp[count($tmp)-1]);				$var1 = $this->get_colid( $data['clientid'] );				$tmp = explode('.', $var1['colid']);				$trid = $tmp[0];								$pensiontype = $this->database->get_c_detail( 'pentype', $data['clientid'] );				//if($var1['amount']>0):					$param['datas'][] = array(						'clientid' 	=> $data['clientid'],						'name'		=> $data['name'],						'pnno'		=> $var->pnno,						'bankbranch'=> $var->bankbranch,						'ptype'		=> $var->ptype,						'trid'		=> $trid,						'colid'		=> $var1['colid'],						'isQ'		=> $var1['isQ'],						'amount'	=> $var1['amount'],						'butal'		=> $this->get_butal_balance( $data['clientid'] ),						'duedate'	=> $data['duedate'],						'pensiontype'=> $pensiontype					);				//endif;							}					endif;		$this->load->view("sales/list/refund_que", $param);		return;	}	function list4app()	{		$this->load->helper('code');		$param['datas'] = $this->db->query(			"SELECT ci_acctno,				cvrf, pnno, refunddue, advrefund, remarks,				ci_bankbranch,				transtype,				ci_name,				queno,				queby,				aid,				status			FROM refund_que			WHERE status IN ('draft','approved')			AND transdate >= '2016-01-01'			ORDER BY queno ASC;		")->result_array();		$this->load->view("sales/list/refund_app", $param);		return;	}		function get_queno()	{		$t = $this->db->query(			"SELECT queno			FROM refund_que			WHERE status IN ('draft')			ORDER BY queno DESC			LIMIT 1;		");		if($t->num_rows())		{			$queno = $t->row()->queno+1;			unset($t);			return $queno;		}else		{			unset($t);			return 1;		}	}		function get_param($int, $value)	{		switch($int)		{			// pnno and bankbranch			case 1:				$t = $this->db->query(					"SELECT bankbranch,						LH_PN as pnno,						pentype as ptype					FROM nhgt_bills.header					WHERE bill_id=$value				");				if($t->num_rows()):					return $t->row();				else:					$t = $this->db->query(						"SELECT bankbranch,							LH_PN as pnno,							pentype as ptype						FROM nhgt_bills.deleted_header						WHERE bill_id=$value					");					if($t->num_rows()):						return $t->row();					else:						$t->bankbranch = '';						$t->pnno = '';						$t->ptype = $value;						return $t;					endif;				endif;			break;		}	}		/**	 * 	 */		/***/	function clickClient()	{		$this->load->helper('code');		$data = explode(' ', $this->input->post('data'));				$this->db->where('CI_AcctNo', $data[0]);		$client = $this->db->get('client')->row();				$this->db->select('CP_Amount');		$this->db->select('CP_BankAcctNo');		$this->db->where('CI_AcctNo', $data[0]);		$cp = $this->db->get('client_pension')->row();		$CP_Amount = (int)$cp->CP_Amount;		$AvailableAmt = substr_replace($CP_Amount, '00', -2);				$cm = $this->db->query("			SELECT CONCAT(CM_LName, ', ', CM_FName, ' ', CM_MName) as name			FROM comaker			WHERE CM_RefNo='".$client->CI_CoMaker."'		")->row();				$agent1 = $this->db->query("			SELECT CONCAT(AI_LName, ', ', AI_FName, ' ', AI_MName) as name			FROM agent			WHERE AI_RefNo='".$client->CI_Agent1."'		")->row();		$agent2 = $this->db->query("			SELECT CONCAT(AI_LName, ', ', AI_FName, ' ', AI_MName) as name			FROM agent			WHERE AI_RefNo='".$client->CI_Agent2."'		")->row();		/** Get Active Loans **/		$ReferencePN = '<option></option>';		$LnHdr = $this->db->query("			SELECT LH_PN,				LH_LoanTrans,				LH_LoanDate			FROM ln_hdr			WHERE CI_AcctNo='".$data[0]."'			AND LH_LoanTrans!='SPEC'			AND LH_isTop='1'			AND LH_isPending='0'			AND LH_Processed='1'			AND LH_Cancelled='0'			ORDER BY LH_LoanDate ASC;		");		if($LnHdr->num_rows()>=1)		{			foreach($LnHdr->result_array() as $LnHdr)			{				$ReferencePN .= '<option value="'.$LnHdr['LH_PN'].'">'.$LnHdr['LH_PN'].' ('.$LnHdr['LH_LoanTrans'].')</option>';			}		}				die(trims("			var loanAppForm=$('#laf' ,parent.document).contents();						loanAppForm.find('#reset').click();						loanAppForm.find('#BankAcctNo').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');			loanAppForm.find('#CI_AcctNo').val('$data[0]').attr('disabled', false);			loanAppForm.find('#CI_Name').val('$data[1] $data[2] $data[3]').attr('disabled', false);			loanAppForm.find('#BankAcctNo').empty().append('<option>$cp->CP_BankAcctNo</option>');			loanAppForm.find('#CP_Amount').val('$cp->CP_Amount').css('color', '#000');						loanAppForm.find('#ReferencePN').empty().attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000').append('$ReferencePN');			loanAppForm.find('#AvailableAmt').val('$AvailableAmt').css('color', '#000');			loanAppForm.find('#LH_LoanTrans').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');						loanAppForm.find('#LH_CoMaker').val('".(isset($client->CI_CoMaker)?$client->CI_CoMaker:'')."').attr('disabled', false);			loanAppForm.find('#CoMakerName').val('".(isset($cm->name)?$cm->name:'')."').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');			loanAppForm.find('#LH_Address').val('$client->CI_Add1').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');			loanAppForm.find('#LH_CedulaNo').val('$client->CI_CedulaNo').attr('disabled', false);			loanAppForm.find('#LH_CedulaPlace').val('$client->CI_CedulaPlace').attr('disabled', false);			loanAppForm.find('#LH_CedulaDate').val('".(isset($client->CI_CedulaDate)?date('M d Y',strtotime($client->CI_CedulaDate)):'')."').attr('disabled', false);			loanAppForm.find('#LH_Agent1').val('".(isset($client->CI_Agent1)?$client->CI_Agent1:'')."').attr('disabled', false);			loanAppForm.find('#LH_Agent2').val('".(isset($client->CI_Agent2)?$client->CI_Agent2:'')."').attr('disabled', false);			loanAppForm.find('#AiName1').val('".(isset($agent1->name)?$agent1->name:'')."').attr('disabled', false);			loanAppForm.find('#AiName2').val('".(isset($agent2->name)?$agent2->name:'')."').attr('disabled', false);			loanAppForm.find('#CI_Agent1_Rate').val('$client->CI_Agent1_Rate').attr('disabled', false);			loanAppForm.find('#CI_Agent2_Rate').val('$client->CI_Agent2_Rate').attr('disabled', false);						loanAppForm.find('#resetButton').click();			loanAppForm.find('#ReferencePN').focus();		"));		return;	}	function changeReferencePN()	{		$this->load->helper('code');				$acctno = $this->input->post('acctno');		$pnno = $this->input->post('pnno');				if($acctno!=''&&$pnno!='')		{			$LnHdr = $this->db->query("				SELECT LH_Reference,					LH_OBC, 					LH_MonthlyAmort,					LH_NetProceeds,					LH_Balance,					LH_LoanTrans,					LH_Terms,					LH_LoanDate,					LH_StartDate,					LH_EndDate				FROM ln_hdr				WHERE CI_AcctNo='".$acctno."'				AND LH_PN='".$pnno."'				AND LH_IsPending=0				AND LH_Processed=1				AND LH_Cancelled=0				;			")->row();			$pnRef = explode('|', $LnHdr->LH_Reference);			$pnBal = explode(';', $LnHdr->LH_Balance);			$refPNendDate = date('Y-m-01',strtotime($LnHdr->LH_EndDate));			$StartMonth = substr(date('F',strtotime($LnHdr->LH_StartDate)), 0, 3);			$EndMonth = substr(date('F',strtotime($LnHdr->LH_EndDate)), 0, 3);			$StartYear = date('Y',strtotime($LnHdr->LH_StartDate));			$EndYear = date('Y',strtotime($LnHdr->LH_EndDate));			die(trims("				$('#LH_Reference').attr('disabled', false).val('$pnno');				$('#LH_Ref_OB').attr('disabled', false);				$('#pnRef').html('$pnRef[0]').attr('title', '$LnHdr->LH_Reference');				$('#pnBal').html('$pnBal[0]').attr('title', '$LnHdr->LH_Balance');				$('#Terms').val('$LnHdr->LH_Terms').css('color', '#000');				$('#MonthlyAmort').val('$LnHdr->LH_MonthlyAmort').css('color', '#000');				$('#NetProceeds').val('$LnHdr->LH_NetProceeds').css('color', '#000');				$('#Balance').val('$LnHdr->LH_Balance').css('color', '#000');				$('#refPNEndDate').val('$refPNendDate').attr('disabled', false);				$('#Duration').val('$StartMonth $StartYear - $EndMonth $EndYear').css('color', '#000');				$('#LH_LoanTrans').val('');			"));		} else {			die(trims("				$('#LH_Reference').val('');				$('#pnRef, #pnBal').html('').attr('title', '');				$('#Terms, #MonthlyAmort, #NetProceeds, #Balance, #Duration, #LH_LoanTrans').val('');			"));		}		return;	}	function changeLH_LoanTrans()	{		$this->load->helper('code');				$AvailableAmt = $this->input->post('availableamt');				$acctno = $this->input->post('acctno');		$LH_LoanTrans = $this->input->post('loantrans');		$AvailableAmt = $this->input->post('availableamt');		$Res_OB = $this->input->post('res_ob');				if($LH_LoanTrans!=='')		{			$LnHdr = $this->db->query("				SELECT LH_MonthlyAmort,				LH_Balance,				LH_LoanTrans,				LH_Terms,				LH_LoanDate,				LH_StartDate,				LH_EndDate				FROM ln_hdr				WHERE CI_AcctNo='".$acctno."'				AND LH_LoanTrans!='SPEC'				AND LH_IsTop='1'				AND LH_IsPending='0'				AND LH_Processed='1'				AND LH_Cancelled='0';			");			/** Get Loan Rates **/			$this->load->model('database');			$result = $this->database->getRates();			$rates = explode(';', $result->value);			$LH_Rate = $rates[0];						$LH_LoanAmt = $AvailableAmt;			$scripts = '';			if($LH_LoanTrans=='ADD')			{				$scripts = "					$('#Terms, #MonthlyAmort, #NetProceeds, #Balance, #Duration').val('');					$('#pnRef, #pnBal').html('').attr('title', '');					$('#LH_Terms').empty().append('<option value=1>1</option><option value=2>2</option><option value=3>3</option><option value=6>6</option><option value=9>9</option><option value=12>12</option><option value=15>15</option><option value=18>18</option>');					$('#LH_LoanAmt').val('$LH_LoanAmt').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');				";			} elseif($LH_LoanTrans=='EXT') {				$LH_Rate = $rates[4];				$scripts = "					$('#LH_Terms').empty().append('<option value=1>1</option><option value=2>2</option><option value=3>3</option><option value=4>4</option><option value=5>5</option><option value=6>6</option><option>7</option><option>8</option>');					$('#LH_LoanAmt').val('$LH_LoanAmt').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');				";			} elseif($LH_LoanTrans=='NEW'||$LH_LoanTrans=='RET') {				$scripts = "					$('#Terms, #MonthlyAmort, #NetProceeds, #Balance, #Duration').val('');					$('#pnRef, #pnBal').html('').attr('title', '');					$('#LH_Terms').empty().append('<option value=1>1</option><option value=2>2</option><option value=3>3</option><option value=6>6</option><option value=9>9</option><option value=12>12</option><option value=15>15</option><option value=18>18</option>');					$('#LH_LoanAmt').val('$LH_LoanAmt').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');				";			} elseif($LH_LoanTrans=='REN'||$LH_LoanTrans=='RET') {				$scripts = "					$('#LH_Terms').empty().append('<option value=1>1</option><option value=2>2</option><option value=3>3</option><option value=6>6</option><option value=9>9</option><option value=12>12</option><option value=15>15</option><option value=18>18</option>');					$('#LH_LoanAmt').val('$LH_LoanAmt').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');				";			} elseif($LH_LoanTrans=='RES') {				$scripts = "					$('#LH_Terms').empty().append('<option value=1>1</option><option value=2>2</option><option value=3>3</option><option value=6>6</option><option value=9>9</option><option value=12>12</option><option value=15>15</option><option value=18>18</option>');					$('#LH_LoanAmt').val('$LH_LoanAmt').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');					$('#NetProceeds').attr('disabled', false).attr('readonly', true);				";			} elseif($LH_LoanTrans=='SPEC') {				$scripts = "					$('#LH_Terms').empty().append('<option value=1>1</option><option value=2>2</option><option value=3>3</option><option value=4>4</option><option value=5>5</option><option value=6>6</option><option>7</option><option>8</option>');					$('#LH_LoanAmt').val('$LH_LoanAmt').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');				";			} elseif($LH_LoanTrans=='SPEC2') {				$scripts = "					$('#LH_Terms').empty().append('<option value=1>1</option>');					$('#LH_LoanAmt').val('2000').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');					$('#coTag').attr('class', 'coTag2');				";			}						if($LH_LoanTrans!='SPEC')			{				$obc = '0.00';				if($LH_LoanTrans=='RES')				{					$obc = $Res_OB;				}								if($LH_LoanTrans=='SPEC2')				{					die(trims("									$('#LH_PayOption, #LH_Computation, #LH_LoanDate, #LoanDate, #LH_WithdrawalDate, #LH_Terms').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');						".$scripts."						$('#LH_Rate').val('0.03').attr('disabled', false);						$('#LH_CollFeeRate').val('0').attr('disabled', false);						$('#LH_ProcFee').val('0').attr('disabled', false);						$('#LH_Notarial').val('0').attr('disabled', false);						$('#LH_OBC_SPEC, #LH_Ref_OB, #LH_PaymentTo, #LH_AdvPayment').val('0.00').attr('disabled', false);						$('#LH_OBC').val('$obc').attr('disabled', false);						$('#PayToButton, #LH_PaymentTo_Ref, #cancelPayToButton').attr('disabled', false);						$('#LH_PaymentTo, #LH_AdvPayment').css('background-color', '#FFFF99').css('border', '1px solid #FF0000');						$('#LH_LoanAmt').blur();					"));				} else {					die(trims("									$('#LH_PayOption, #LH_Computation, #LH_LoanDate, #LoanDate, #LH_WithdrawalDate, #LH_Terms').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');						".$scripts."						$('#LH_Rate').val('$LH_Rate').attr('disabled', false);						$('#LH_CollFeeRate').val('$rates[1]').attr('disabled', false);						$('#LH_ProcFee').val('$rates[2]').attr('disabled', false);						$('#LH_Notarial').val('$rates[3]').attr('disabled', false);						$('#LH_OBC_SPEC, #LH_Ref_OB, #LH_PaymentTo, #LH_AdvPayment').val('0.00').attr('disabled', false);						$('#LH_OBC').val('$obc').attr('disabled', false);						$('#PayToButton, #LH_PaymentTo_Ref, #cancelPayToButton').attr('disabled', false);						$('#LH_PaymentTo, #LH_AdvPayment').css('background-color', '#FFFF99').css('border', '1px solid #FF0000');						$('#LH_LoanAmt').blur();					"));				}			} elseif($LH_LoanTrans=='SPEC') {				die(trims("								$('#LH_PayOption, #LH_Computation, #LH_LoanDate, #LoanDate, #LH_WithdrawalDate, #LH_Terms').attr('disabled', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');					".$scripts."					$('#LH_Rate').val('0.03').attr('disabled', false);					$('#LH_CollFeeRate, #LH_ProcFee, #LH_Notarial, #LH_OBC_SPEC, #LH_Ref_OB, #LH_OBC, #LH_PaymentTo, #LH_AdvPayment').val('0.00').attr('disabled', false);					$('#PayToButton, #LH_PaymentTo_Ref, #cancelPayToButton').attr('disabled', false);					$('#LH_PaymentTo, #LH_AdvPayment').css('background-color', '#FFFF99').css('border', '1px solid #FF0000');					$('#LH_LoanAmt').blur();				"));			}		} elseif($LH_LoanTrans=='') {			die(trims("				$('#LH_Reference').val($('#ReferencePN').val());				$('#LH_PayOption, #LH_Computation, #LH_LoanDate, #LoanDate, #LH_WithdrawalDate, #LH_Terms, #LH_LoanAmt, #LH_PaymentTo, #LH_AdvPayment').attr('disabled', true).css('background-color', '#FFF').css('border', '1px solid #0099CC');				$('#LH_LoanAmt, #LH_StartDate, #LH_EndDate, #LH_Principal, #LH_MonthlyAmort, #LH_Rate, #LH_InterestAmt, #LH_CollFeeRate, #LH_CollFee, #LH_procFee, #LH_Notarial, #LH_Ref_OB, #LH_OBC, #LH_OBC_SPEC, #LH_PaymentTo, #LH_AdvPayment, #LH_NetProceeds').val('').attr('disabled', true);				$('#PayToButton, #LH_PaymentTo_Ref, #cancelPayToButton').attr('disabled', true);				$('#coTag, #previewButton, #resetButton, #submitButton').attr('disabled', true);			"));		}		return;	}		function blurLH_LoanAmt() {		$this->load->helper('code');				$LH_LoanTrans = $this->input->post('loantrans');		$LH_LoanDate = $this->input->post('loandate');		$LH_Terms = $this->input->post('terms');		$LH_LoanAmt = $this->input->post('loanamt');		$LH_Rate = $this->input->post('rate');		$LH_CollFeeRate = $this->input->post('collfeerate');		$LH_ProcFee = $this->input->post('procfee');		$LH_Notarial = $this->input->post('notarial');		$LH_OBC = $this->input->post('obc');		$LH_PaymentTo = $this->input->post('paymentto');		$LH_AdvPayment = $this->input->post('advpayment');		$refPNEndDate = $this->input->post('refpnenddate');		$coTag = $this->input->post('coTag');		$CI_AcctNo = $this->input->post('acctno');		$data = $this->input->post('refpn');		$refpn = explode(' ', $data);				$loandate = $this->input->post('loandate');		$LH_LoanDate = date('Y-m-01', strtotime($LH_LoanDate));		$LH_LoanDate = strtotime($LH_LoanDate);		if($LH_LoanTrans == 'EXT')		{			$refPNEndDate = date('Y-m-01', strtotime($refPNEndDate));			$refPNEndDate = strtotime($refPNEndDate);			$LH_StartDate = date('F Y',strtotime('+1 month', $refPNEndDate));			$LH_EndDate = date('F Y',strtotime('+' . $LH_Terms . ' month', $refPNEndDate));		} elseif($LH_LoanTrans == 'SPEC') {			$date = explode('-', $this->input->post('loandate'));						$LH_StartDate = date('M Y', strtotime($date[0] . '-12-01'));			$LH_EndDate = date('M Y', strtotime($date[0] . '-12-01'));		} else {			if($LH_LoanTrans == 'RES')			{				$q = $this->db->query("					SELECT LH_LoanDate, LH_StartDate					FROM ln_hdr					WHERE CI_AcctNo='" . $CI_AcctNo . "'					AND LH_PN='" . $refpn[0] . "'					AND LH_Cancelled = 0					AND LH_IsPending = 0					AND LH_Processed = 1;				")->row();				$LH_StartDate = date('M Y', strtotime($q->LH_StartDate));				$LH_LoanDate = date('Y-m-01', strtotime($q->LH_LoanDate));				$LH_LoanDate = strtotime($LH_LoanDate);			}						if($coTag == 'coTag1')			{				$LH_StartDate = date('F Y',strtotime('+2 month', $LH_LoanDate));				$cutOffTerms = $LH_Terms + 1;				$LH_EndDate = date('F Y',strtotime('+' . $cutOffTerms . ' month', $LH_LoanDate));			} elseif($coTag == 'coTag0') {				$LH_StartDate = date('F Y',strtotime('+1 month', $LH_LoanDate));				$LH_EndDate = date('F Y',strtotime('+' . $LH_Terms . ' month', $LH_LoanDate));			} elseif($coTag == 'coTag2') {				$lhterms = $LH_Terms - 1;				$LH_StartDate = date('F Y',strtotime($this->input->post('loandate')));				$LH_EndDate = date('F Y',strtotime('+' . $lhterms . ' month', $LH_LoanDate));			}		}				$spec = "";		$LH_Principal = $LH_Terms * $LH_LoanAmt;		if($LH_LoanTrans == 'EXT')		{			$LH_InterestAmt = $LH_Rate * $LH_Principal;		} elseif($LH_LoanTrans == 'SPEC') {			$mo = date('m', strtotime($loandate));			$m = intval($mo);			$t = intval(13) - intval($m); 			$LH_InterestAmt = ($LH_Rate * $t) * $LH_LoanAmt;						$spec = "$('#LH_Terms').val('$t')";			$LH_Principal = $LH_LoanAmt;		} else {			$LH_InterestAmt = ($LH_Rate * $LH_Terms) * $LH_Principal;		}				$LH_CollFee = $LH_CollFeeRate * $LH_Principal;		$LH_NetProceeds = $LH_Principal - $LH_InterestAmt - $LH_CollFee - $LH_ProcFee - $LH_OBC - $LH_PaymentTo - $LH_AdvPayment;				$this->db->select('CP_WithdrawalDay');		$this->db->where('CI_AcctNo', $CI_AcctNo);		$cp = $this->db->get('client_pension')->row();				$data = explode('-', $this->input->post('loandate'));		die(trims("			$('#coTag').attr('disabled', false);			$('#previewButton, #resetButton').attr('disabled', false);			$('#principalFormula').html('($LH_LoanAmt x $LH_Terms)');			$('#LH_Principal').val('$LH_Principal').attr('disabled', false);			$('#LH_MonthlyAmort').val('$LH_LoanAmt').attr('disabled', false);			$('#LH_StartDate').val('$LH_StartDate').attr('disabled', false);			$('#LH_EndDate').val('$LH_EndDate').attr('disabled', false);			$('#LH_InterestAmt').val('$LH_InterestAmt').attr('disabled', false);			$('#LH_CollFee').val('$LH_CollFee').attr('disabled', false);			$('#LH_NetProceeds').val('$LH_NetProceeds').attr('disabled', false);			$('#LH_WithdrawalDate').val('" . $cp->CP_WithdrawalDay . "');			$('#submitButton').attr('disabled', false);			" . $spec . "		"));	}		function referencePNList()	{		$acctno = $this->uri->segment(3, '');		$param['referencePN'] = $this->uri->segment(4, '');		$param['datas'] = '';		if($acctno)		{			$param['datas'] = $this->db->query("				SELECT CI_AcctNo, 					LH_PN,					LH_MonthlyAmort,					LH_Principal,					LH_Balance,					LH_LoanTrans,					LH_Terms				FROM ln_hdr				WHERE CI_AcctNo = '" . $acctno . "'				AND LH_IsTop = 1				AND LH_IsPending = 0				AND LH_Processed = 1				AND LH_Cancelled = 0				AND LH_LoanTrans != 'SPEC'				ORDER BY LH_PN DESC;			")->result_array();		}		$this->load->view('sales/list/referencepn', $param);		return;	}		function loanComputation()	{		$current_branch = str_replace('nhgt_', '', $this->db->database);				$lhloandate = $this->uri->segment(3, '');				if($lhloandate == '0')		{			$param['acctno'] = $this->uri->segment(4, '');			$param['pnno'] = $this->uri->segment(5, '');						// Check branch_transfer table for sales transfer			$this->db->select('frombranch', false);			$this->db->from('nhgt_master.branch_transfer');			$this->db->where('tobranch', $current_branch);			$this->db->where('status', 'forProcess');			$this->db->where('refid', $param['acctno'] . '.' . $param['pnno']);			$this->db->where('reftype', 'sales');			$query_bt = $this->db->get();						$database = '';			if($query_bt->num_rows > 0)			{				$qbt = $query_bt->row();								$database = 'nhgt_' . $qbt->frombranch . '.';			}						$LnHdr = $this->db->query("				SELECT *				FROM " . $database . "ln_hdr				WHERE CI_AcctNo='" . $param['acctno'] . "'				AND LH_PN = '" . $param['pnno'] . "'				AND LH_Cancelled != 1;			")->row();						if($LnHdr->LH_PaymentTo&&$LnHdr->LH_PaymentTo_Ref)			{				$data = explode('|', $LnHdr->LH_PaymentTo_Ref);				$PaymentTo = $this->db->query("					SELECT CONCAT(a.CI_LName, ', ', a.CI_FName, ' ', a.CI_MName) AS name					FROM " . $database . "client					WHERE CI_AcctNo =' " . $data[0] ."'				");			}						$LH_LoanTrans = $LnHdr->LH_LoanTrans;			$lhrate = $LnHdr->LH_Rate;			$lhprocfee = $LnHdr->LH_ProcFee;			$lhcollfee = $LnHdr->LH_CollFee;			$param['lhloandate'] = $LnHdr->LH_LoanDate;			$param['ciname'] = $LnHdr->CI_Name;			$param['lhaddress'] = $LnHdr->LH_Address;			$param['cpamount'] = $LnHdr->LH_BankAmt;			$param['lhstartdate'] = $LnHdr->LH_StartDate;			$param['lhenddate'] = $LnHdr->LH_EndDate;			$param['lhmonthlyamort'] = $LnHdr->LH_MonthlyAmort;			$param['lhterms'] = $LnHdr->LH_Terms;			$param['lhprincipal'] = $LnHdr->LH_Principal;			$param['lhobc'] = $LnHdr->LH_OBC;			$param['lhpaymentto'] = $LnHdr->LH_PaymentTo;			$param['lhadvpayment'] = $LnHdr->LH_AdvPayment;			$param['lhreference'] = ($LnHdr->LH_Reference == '' || $LnHdr->LH_Reference == NULL ? '' : $LnHdr->LH_Reference);			$param['lhpaytorefpn'] = ($LnHdr->LH_PaymentTo_Ref == '' || $LnHdr->LH_PaymentTo_Ref == NULL ? '' : $LnHdr->LH_PaymentTo_Ref);			$param['paytoname'] = ($LnHdr->LH_PaymentTo_Ref == '' || $LnHdr->LH_PaymentTo_Ref == NULL ? '' : $PaymentTo->name);			$param['lhcollfee'] = $lhcollfee;		} elseif($lhloandate != '0') {			$param['lhloandate'] = date('Y-m-d', strtotime($lhloandate));			$param['ciname'] = $this->uri->segment(4, '');			$param['lhaddress'] = $this->uri->segment(5, '');			$param['cpamount'] = $this->uri->segment(6, '');			$LH_LoanTrans = $this->uri->segment(7, '');						$param['lhstartdate'] = $this->uri->segment(8, '');			$param['lhenddate'] = $this->uri->segment(9, '');			$param['lhmonthlyamort'] = $this->uri->segment(10, '');			$param['lhterms'] = $this->uri->segment(11, '');			$param['lhprincipal'] = $param['lhmonthlyamort'] * $param['lhterms'];			$param['lhobc'] = $this->uri->segment(12, '');			$param['lhpaymentto'] = $this->uri->segment(13, '');			$param['lhadvpayment'] = $this->uri->segment(14, '');			$param['lhreference'] = ($this->uri->segment(15, '') == '0' ? '' : $this->uri->segment(15, ''));			$lhrate = $this->uri->segment(16, '');			$lhprocfee = $this->uri->segment(17, '');			$lhcollfee = $this->uri->segment(18, '');			$param['lhpaytorefpn'] = ($this->uri->segment(19, '') == '0' ?' ' : $this->uri->segment(19, ''));			$param['paytoname'] = ($this->uri->segment(20, '') == '0' ? '' : $this->uri->segment(20, ''));						$param['lhcollfee'] = $param['lhprincipal'] * $lhcollfee;		}				switch($LH_LoanTrans)		{			case 'ADD':				$param['lhloantrans'] = 'ADDITIONAL';				break;			case 'EXT':				$param['lhloantrans'] = 'EXTENSION';				break;			case 'NEW':				$param['lhloantrans'] = 'NEW CLIENT';				break;			case 'REN':				$param['lhloantrans'] = 'RENEWAL';				break;			case 'RES':				$param['lhloantrans'] = 'RESTRUCTURE';				break;			case 'RET':				$param['lhloantrans'] = 'RETURNING';				break;			case 'NEW':				$param['lhloantrans'] = 'NEW CLIENT';				break;			case 'SPEC':				$param['lhloantrans'] = 'ADVANCE BONUS';				break;			case 'SPEC2':				$param['lhloantrans'] = 'ADVANCE SSS INCREASE';				break;		}				if($LH_LoanTrans == 'EXT')		{			$param['interest'] = 1 - $lhrate;		} elseif($LH_LoanTrans == 'SPEC') {			$mo = date('m', strtotime($param['lhloandate']));			$m = intval($mo);			$t = intval(13) - intval($m); 			$param['interest'] = 1 - (0.03 * $t);						$param['lhprincipal'] = $param['lhmonthlyamort'];		} else {			$param['interest'] = 1 - ($lhrate * $param['lhterms']);		}				$param['total1'] = $param['lhprincipal'] * $param['interest'];		$param['lhprocfee'] = $lhprocfee;		$param['total2'] = $param['total1'] - $param['lhprocfee'];		$param['total3'] = $param['total2'] - $param['lhcollfee'];		$param['total4'] = $param['total3'] - $param['lhobc'];		$param['advpaymentto'] = $param['lhpaymentto'] + $param['lhadvpayment'];		$param['netproceeds'] = $param['total4'] - $param['advpaymentto'];					$this->load->view('sales/print/loancomputation', $param);		return;	}		function insertLoan()	{		$this->load->helper('code');				$sql = $this->db->query("			SELECT a.CP_BankBranch,				a.CP_BankAcctNo,				a.CP_Amount,				a.CP_PType,				b.CI_Type			FROM client_pension a,				client b			WHERE b.CI_AcctNo='".$_POST['CI_AcctNo']."'			AND a.CI_AcctNo = b.CI_AcctNo;		")->row();				$this->load->model('database');		$result = $this->database->generateId('ln_hdr', 'SysId');		$nextSysId = $result->SysId + 1;				$result = $this->database->getBranch();		$branch = explode(';', $result->value);		$dateNow = date('Y-m-d');				$query = $this->db->query("			SELECT LH_PN			FROM ln_hdr			WHERE CI_AcctNo='".$_POST['CI_AcctNo']."'			AND LH_LoanTrans!='SPEC'			AND LH_Cancelled!='1'			ORDER BY LH_PN			DESC			LIMIT 1;		");				if($query)		{			if($query->num_rows() == 0)			{				$LH_PN = $branch[0].'-'.$_POST['LH_LoanDate'].'-001';			} else {				$query = $query->row();				$pnno = explode('-', $query->LH_PN);				$count = (int)$pnno[4] + 1;				$count = str_pad($count, 3, '0', STR_PAD_LEFT);				$LH_PN = $branch[0].'-'.$_POST['LH_LoanDate'].'-'.$count;			}		}		$LH_Principal = str_replace(',','',$_POST['LH_Principal']);		$LH_AdvPayment = str_replace(',','',$_POST['LH_AdvPayment']);		$LH_Balance = $LH_Principal - $LH_AdvPayment;				if($_POST['LH_LoanTrans'] == 'SPEC')		{			$LH_PN = 'ADVANCE_BONUS';			$LH_IsPending = 1;			$LH_Processed = 1;			$href = 'window.parent.document.location.href="checkvoucher";';		} elseif($_POST['LH_LoanTrans'] == 'SPEC2') {			$LH_PN = 'ASI-' . date('Y-m-d') . '-001';			$LH_IsPending = 1;			$LH_Processed = 1;			$href = 'window.parent.document.location.href="checkvoucher";';		} else {			$LH_IsPending = 1;			$LH_Processed = 0;			$href = 'window.parent.document.location.href="loanprocessing";';		}				$loan_day = date('d', strtotime($_POST['LH_LoanDate']));		$start_day = date('t', strtotime($_POST['LH_StartDate']));		$end_day = date('t', strtotime($_POST['LH_EndDate']));				if($loan_day > $start_day)		{			$lh_startdate = date('Y-m-' . $start_day, strtotime($_POST['LH_StartDate']));		} else {			$lh_startdate = date('Y-m-' . $loan_day, strtotime($_POST['LH_StartDate']));		}				if($loan_day > $end_day)		{			$lh_enddate = date('Y-m-' . $end_day, strtotime($_POST['LH_EndDate']));		} else {			$lh_enddate = date('Y-m-' . $loan_day, strtotime($_POST['LH_EndDate']));		}				$loanArray = array(			'SysID'				 => $nextSysId,			'CI_AcctNo'			 => $_POST['CI_AcctNo'],			'LH_BranchCode'		 => $branch[0],			'CI_Name'			 => $_POST['CI_Name'],			'LH_BankBranch'		 => $sql->CP_BankBranch,			'LH_BankAcctNo'		 => $sql->CP_BankAcctNo,			'LH_BankAmt'		 => $sql->CP_Amount,			'LH_PN'				 => $LH_PN,			'LH_Reference'		 => (isset($_POST['LH_Reference'])?$_POST['LH_Reference']:''),			'LH_Ref_OB'			 => $_POST['LH_Ref_OB'],			'LH_LoanAmt'		 => str_replace(',','',$_POST['LH_MonthlyAmort']),			'LH_MonthlyAmort'	 => str_replace(',','',$_POST['LH_MonthlyAmort']),			'LH_Principal'		 => $LH_Principal,			'LH_NetProceeds'	 => str_replace(',','',$_POST['LH_NetProceeds']),			'LH_InterestAmt'	 => str_replace(',','',$_POST['LH_InterestAmt']),			'LH_Rate'			 => $_POST['LH_Rate'],			'LH_Balance'		 => $LH_Balance,			'LH_OBC'			 => str_replace(',','',$_POST['LH_OBC']),			'LH_OBC_SPEC'		 => str_replace(',','',$_POST['LH_OBC_SPEC']),			'LH_Refund'			 => 0,			'LH_Payment'		 => $LH_AdvPayment,			'LH_Renew'			 => 0,			'LH_ProcFee'		 => str_replace(',','',$_POST['LH_ProcFee']),			'LH_CollFee'		 => str_replace(',','',$_POST['LH_CollFee']),			'LH_CollFeeRate'	 => $_POST['LH_CollFeeRate'],			'LH_Notarial'		 => str_replace(',','',$_POST['LH_Notarial']),			'LH_PaymentTo_Ref'	 => $_POST['LH_PaymentTo_Ref'],			'LH_PaymentTo'		 => str_replace(',','',$_POST['LH_PaymentTo']),			'LH_AdvPayment'		 => $LH_AdvPayment,			'LH_LoanType'		 => $sql->CI_Type,			'LH_LoanTrans'		 => $_POST['LH_LoanTrans'],			'LH_Terms'			 => $_POST['LH_Terms'],			'LH_LoanDate'		 => date('Y-m-d', strtotime($_POST['LH_LoanDate'])),			'LH_StartDate'		 => $lh_startdate,			'LH_EndDate'		 => $lh_enddate,			'LH_PayOption'		 => $_POST['LH_PayOption'],			'LH_PaymentType'	 => $sql->CP_PType,			'LH_Computation'	 => $_POST['LH_Computation'],			'LH_WithdrawalDate'	 => $_POST['LH_WithdrawalDate'],			'LH_CoMaker'		 => $_POST['LH_CoMaker'],			'LH_Address'		 => $_POST['LH_Address'],			'LH_Agent1'			 => $_POST['LH_Agent1'],			'LH_Agent2'			 => $_POST['LH_Agent2'],			'LH_CedulaNo'		 => $_POST['LH_CedulaNo'],			'LH_CedulaPlace'	 => $_POST['LH_CedulaPlace'],			'LH_CedulaDate'		 => ($_POST['LH_CedulaDate']==''?NULL:date('Y-m-d', strtotime($_POST['LH_CedulaDate']))),			'LH_IsTop'			 => 0,			'LH_IsLatest'		 => 0,			'LH_IsPending'		 => $LH_IsPending,			'LH_IsMultiplePN'	 => 0,			'LH_IncludeToList'	 => 0,			'LH_IsReleased'		 => 0,			'LH_IsReturned'		 => 0,			'LH_ApprovedBy'		 => $this->session->userdata('user_name'),			'LH_ApprovedDate'	 => date('Y-m-d', strtotime($_POST['LH_LoanDate'])),			'LH_Processed'		 => $LH_Processed,			'LH_Cancelled'		 => 0,			'LH_BranchCode_Proc' => $branch[0],			'LH_Posted_BySales'	 => 0,			'LH_Posted_ByAcct'	 => 0,			'LH_IsAdded'		 => 1,			'LH_IsModified'		 => 0		);		$this->db->insert('ln_hdr', $loanArray) or die($this->db->_error_message());		die(trims("			<script>				".$href."			</script>		"));		return;	}		function clickLoan()	{		$this->load->helper('code');				$data = explode(' ', $this->input->post('data'));		$this->db->where('LH_PN', $data[3]);		$this->db->where('CI_AcctNo', $data[2]);		$this->db->where('LH_Cancelled', '0');		$LnHdr = $this->db->get('ln_hdr')->row();				switch($LnHdr->LH_LoanTrans)		{			case 'NEW':				$loantrans = 'NEW CLIENT';				break;			case 'REN':				$loantrans = 'RENEWAL';				break;			case 'ADD':				$loantrans = 'ADDITIONAL';				break;			case 'EXT':				$loantrans = 'EXTENSION';				break;			case 'RES':				$loantrans = 'RESTRUCTURE';				break;			case 'RET':				$loantrans = 'RETURNING';				break;			case 'SPEC':				$loantrans = 'ADVANCE BONUS';				break;			case 'SPEC2':				$loantrans = 'ADVANCE SSS INCREASE';				break;		}				switch($LnHdr->LH_PayOption)		{			case 'M':				$payoption = 'MONTHLY';				break;			case 'SM':				$payoption = 'SEMI-MONTHLY';				break;		}				switch($LnHdr->LH_Computation)		{			case 'REG':				$computation = 'REGULAR';				break;			case 'ADD':				$computation = 'ADD-ON';				break;		}				$this->db->where('CI_AcctNo', $data[2]);		$client = $this->db->get('client')->row();		$agent1 = $this->db->query("			SELECT CONCAT(AI_LName, ', ', AI_FName, ' ', AI_MName) as name			FROM agent			WHERE AI_RefNo='".$client->CI_Agent1."'		")->row();		$agent2 = $this->db->query("			SELECT CONCAT(AI_LName, ', ', AI_FName, ' ', AI_MName) as name			FROM agent			WHERE AI_RefNo='".$client->CI_Agent2."'		")->row();		$comaker = $this->db->query("			SELECT CONCAT(CM_LName, ', ', CM_FName, ' ', CM_MName) as name			FROM comaker			WHERE CM_RefNo='".$LnHdr->LH_CoMaker."'		")->row();				$atty = $this->db->query("			SELECT value			FROM parameter			WHERE code LIKE '%ATTY%'			ORDER BY code			ASC		")->result_array();		$i = 0;		foreach($atty as $atty)		{			$data = explode(';', $atty['value']);			$a[$i] = $data[0];			$b[$i] = $data[1];			$i++;		}				die(trims("			var loanProcForm=$('#lpf' ,parent.document).contents();						loanProcForm.find('#printButton ,#cancelButton').attr('disabled', false);			loanProcForm.find('#LH_Witness1, #LH_Witness2').attr('readonly', false).css('background-color', '#FFFF99').css('border', '1px solid #FF0000');						loanProcForm.find('#CI_AcctNo').val('$LnHdr->CI_AcctNo');			loanProcForm.find('#CI_Name').val('$LnHdr->CI_Name');			loanProcForm.find('#LH_PN').val('$LnHdr->LH_PN');			loanProcForm.find('#LH_BankAcctNo').val('$LnHdr->LH_BankAcctNo');			loanProcForm.find('#Remarks').html('$loantrans".($loantrans=='RENEWAL'?': '.$LnHdr->LH_Reference:'')."');			loanProcForm.find('#LH_WithdrawalDate').val('$LnHdr->LH_WithdrawalDate');			loanProcForm.find('#LH_LoanTrans').val('$loantrans');			loanProcForm.find('#LH_LoanDate').val('".date('M d Y', strtotime($LnHdr->LH_LoanDate))."');			loanProcForm.find('#LH_PayOption').val('$payoption');			loanProcForm.find('#LH_ApprovedDate').val('".date('M d Y', strtotime($LnHdr->LH_ApprovedDate))."');			loanProcForm.find('#LH_Computation').val('$computation');			loanProcForm.find('#Duration').val('".date('M y', strtotime($LnHdr->LH_StartDate))." - ".date('M y', strtotime($LnHdr->LH_EndDate))."');			loanProcForm.find('#LH_Terms').val('$LnHdr->LH_Terms');			loanProcForm.find('#LH_LoanAmt').val('$LnHdr->LH_LoanAmt');			loanProcForm.find('#LH_Principal').val('$LnHdr->LH_Principal');			loanProcForm.find('#LH_MonthlyAmort').val('$LnHdr->LH_MonthlyAmort');			loanProcForm.find('#LH_Rate').val('$LnHdr->LH_Rate');			loanProcForm.find('#LH_InterestAmt').val('$LnHdr->LH_InterestAmt');			loanProcForm.find('#LH_CollFeeRate').val('$LnHdr->LH_CollFeeRate');			loanProcForm.find('#LH_CollFee').val('$LnHdr->LH_CollFee');			loanProcForm.find('#LH_ProcFee').val('$LnHdr->LH_ProcFee');			loanProcForm.find('#LH_Notarial').val('$LnHdr->LH_Notarial');			loanProcForm.find('#LH_OBC').val('$LnHdr->LH_OBC');			loanProcForm.find('#LH_OBC_SPEC').val('$LnHdr->LH_OBC_SPEC');			loanProcForm.find('#LH_PaymentTo').val('$LnHdr->LH_PaymentTo');			loanProcForm.find('#LH_AdvPayment').val('$LnHdr->LH_AdvPayment');			loanProcForm.find('#LH_NetProceeds').val('$LnHdr->LH_NetProceeds');						loanProcForm.find('#AiName1').val('".(isset($agent1->name)?$agent1->name:'')."');			loanProcForm.find('#AiName2').val('".(isset($agent2->name)?$agent2->name:'')."');			loanProcForm.find('#CoMakerName').val('".(isset($comaker->name)?$comaker->name:'')."');			loanProcForm.find('#LH_Address').val('$LnHdr->LH_Address');			loanProcForm.find('#LH_CedulaNo').val('$LnHdr->LH_CedulaNo');			loanProcForm.find('#LH_CedulaPlace').val('$LnHdr->LH_CedulaPlace');			loanProcForm.find('#LH_CedulaDate').val('".date('M d y', strtotime($LnHdr->LH_CedulaDate))."');						loanProcForm.find('#LH_Atty1').val('$a[0]');			loanProcForm.find('#LH_Atty2').val('$a[1]');			loanProcForm.find('#LH_Atty3').val('$a[2]');			loanProcForm.find('#Atty1Name').val('$b[0]');			loanProcForm.find('#Atty2Name').val('$b[1]');			loanProcForm.find('#Atty3Name').val('$b[2]');		"));		return;	}		function getSalesCV()	{		$branch='';		if(isset($_POST['isbrtrans'])):			$t = explode('|',$_POST['isbrtrans']);			$branch = "nhgt_{$t[0]}.";		endif;		$acctno = $this->input->post('acctno');		$query = $this->db->query("			SELECT * 			FROM $branch"."ln_hdr			WHERE CI_AcctNo='".$acctno."'			AND LH_IsPending='1'			AND LH_Processed='1'			AND LH_Cancelled='0'			ORDER BY LH_PN ASC;		");		$rows = $query->num_rows();		if($rows>0)		{			echo $rows.';';			$i = 0;			foreach($query->result_array() as $row)			{				$pn[$i] = $row['LH_PN'];				$amt[$i] = $row['LH_NetProceeds'];				switch($row['LH_LoanTrans'])				{					case 'ADD':						$re[$i] = 'ADDITIONAL';						break;					case 'EXT':						$re[$i] = 'EXTENSION';						break;					case 'NEW':						$re[$i] = 'NEW CLIENT';						break;					case 'REN':						$re[$i] = 'RENEWAL';						break;					case 'RES':						$re[$i] = 'RESTRUCTURE';						break;					case 'RET':						$re[$i] = 'RETURNING';						break;					case 'SPEC':						$re[$i] = 'ADVANCE BONUS';						break;					case 'SPEC2':						$re[$i] = 'ADVANCE SSS INCREASE';						break;				}				$i++;			}						for($a=0;$a<$rows;$a++)			{				echo $pn[$a].';';			}			for($a=0;$a<$rows;$a++)			{				echo $amt[$a].';';			}			for($a=0;$a<$rows;$a++)			{				echo $re[$a].';';			}		}				$pnno = $this->input->post('pnno');		$query = $this->db->query("			SELECT *			FROM $branch"."ln_hdr			WHERE CI_AcctNo='".$acctno."'			AND LH_PN='".$pnno."'			AND LH_IsPending='1'			AND LH_Processed='1'			AND LH_Cancelled='0';			")->row();		echo $query->CI_Name.';'.date('Y-m-d', strtotime($query->LH_LoanDate)).';'.$query->CI_AcctNo.';';		return;	}	function getRefundCV()	{		$branch='';		if(isset($_POST['isbrtrans'])):			$t = explode('|',$_POST['isbrtrans']);			$branch = "nhgt_{$t[0]}.";		endif;		$acctno = $this->input->post('acctno');		$pnno = $this->input->post('pnno');		$refundQue = $this->db->query("			SELECT *			FROM $branch"."refund_que			WHERE ci_acctno='".$acctno."'			AND pnno='".$pnno."'			AND cvrf='CV'			AND status='approved';		")->row();		echo $refundQue->ci_name.';';		echo $refundQue->transdate.';';				echo $refundQue->refunddue.';';		echo $refundQue->remarks.';';		return;	}	function getDisbursementCV()	{		$reference = $this->input->post('reference');		$disbursement = $this->db->query("			SELECT a.account2 as account2, 				a.reference as reference,				a.amount as amount,				a.trans_type as trans_type,				b.bankname as bankname			FROM tbl_disbursement a, `nhgt_master`.`bankaccts` b			WHERE a.reference='$reference'			AND a.account2=REPLACE(b.bankaccount, '-', '')			AND a.status='ForPrinting';		");		$rows = $disbursement->num_rows();		if($rows>0)		{			echo $rows.';';			$reference = array();			$amount = array();			$trans_type = array();			foreach($disbursement->result_array() as $row)			{				$reference[] = $row['reference'].'|'.$row['account2'];				$amount[] = $row['amount'];				$trans_type[] = $row['trans_type'].' TO '.$row['bankname'];			}						for($a=0;$a<$rows;$a++)			{				echo $reference[$a].';';			}			for($a=0;$a<$rows;$a++)			{				echo $amount[$a].';';			}			for($a=0;$a<$rows;$a++)			{				echo $trans_type[$a].';';			}		}				$reference = $this->input->post('reference');		$query = $this->db->query("			SELECT *			FROM tbl_disbursement			WHERE reference='".$reference."'			AND status='ForPrinting';		")->row();				$checkacct = $this->db->query("			SELECT value			FROM parameter			WHERE code='CHECKACCT';		")->row();		$data = explode(';', $checkacct->value);		$checkedby = $data[1];		echo $query->remarks.';'.		date('M d Y', strtotime($query->trans_date)).';'.		$query->account1.';'.		$checkedby;		return;	}		function index()	{		$this->template->set('page_title', 'Sales');		$this->template->load('template', 'sales/index');		return;	}	function loanapplication()	{		$this->template->load('template', 'sales/loanapplication');		return;	}		function loanprocessing()	{		$this->template->load('template', 'sales/loanprocessing');		return;	}		function checkvoucher()	{		$this->template->load('template', 'sales/checkvoucher');		return;	}		function refundque()	{		$this->template->load('template', 'sales/refund_que');		return;	}	function refunddue()	{		$this->template->load('template', 'sales/refund_due');		return;	}	function refundapp()	{		$this->template->load('template', 'sales/refund_app');		return;	}		function clientList()	{		$param['datas'] = $this->db->query("			SELECT a.CI_AcctNo AS clientid,				CONCAT(a.CI_LName, ', ', a.CI_FName, ' ', a.CI_MName) AS name,				a.CI_AcctNo as acctno,				b.CP_PensionType as pensiontype,				b.CP_BankBranch as bankbranch			FROM client a, client_pension b			WHERE a.CI_AcctNo=b.CI_AcctNo			AND a.CI_IsDeleted != 1			AND b.CP_IsDeleted != 1			ORDER BY name;		")->result_array();				$this->load->view("sales/list/client", $param);		return;	}		function loanList()	{		$param['datas'] = $this->db->query(			"SELECT 				CI_AcctNo,				LH_PN,				CI_Name			FROM ln_hdr			WHERE LH_IsPending='1'			AND LH_Processed='0'			AND LH_Cancelled='0'			AND LH_LoanTrans!='SPEC'			ORDER BY LH_LoanDate ASC;		")->result_array();				$this->load->view("sales/list/loan", $param);		return;	}		function cvlist()	{		$this->load->model('rsm');		$current_branch = $this->rsm->branch();		$param['datas'] = array();				// 20150821FriRsm->Sales List		$q = $this->db->query(			"SELECT 				SysId,				CI_AcctNo,				LH_PN,				CI_Name,				LH_LoanDate			FROM ln_hdr			WHERE LH_IsPending='1'			AND LH_Processed='1'			AND LH_Cancelled='0'			ORDER BY LH_LoanDate ASC;		")->result_array();		if(count($q)):			foreach ($q as $v)			{				$branch = '';				$aid = $v['CI_AcctNo'].'.'.$v['LH_PN'];				$istransfer = $this->rsm->isInterBranch( $aid, $current_branch );				if( $istransfer->result ):					$type = 'transferred';					$branch = $istransfer->branch;				else:					$type = 'sales';				endif;				$param['datas'][] = array(					'id'		 =>	$aid,					'CI_AcctNo'  => $v['CI_AcctNo'],					'LH_PN' 	 => $v['LH_PN'],					'CI_Name'	 => $v['CI_Name'],					'LH_LoanDate'=> $v['LH_LoanDate'],					'type' 		 => $type,					'branch' 	 => $branch				);				}		endif;		// 20150821FriRsm->Refund List		$q = $this->db->query(			"SELECT aid,				ci_acctno,				pnno,				ci_name,				transdate			FROM refund_que			WHERE status='approved'			AND cvrf='CV';		")->result_array();	 	if(count($q)):						foreach ($q as $v)			{				$branch = '';				$istransfer = $this->rsm->isInterBranch( $v['aid'], $current_branch );				if( $istransfer->result ):					$type = 'transferred';					$branch = $istransfer->branch;				else:					$type = 'refund';				endif;								$param['datas'][] = array(					'id' 		 => $v['aid'],					'CI_AcctNo'  => $v['ci_acctno'],					'LH_PN' 	 => $v['pnno'],					'CI_Name' 	 => $v['ci_name'],					'LH_LoanDate'=> $v['transdate'],					'type' 		 => $type,					'branch' 	 => $branch				);				}		endif;		// Check Branch Master if there's transfer		$q = $this->db->query(			"SELECT *			FROM nhgt_master.branch_transfer			WHERE tobranch='$current_branch'			AND status='forProcess';		");	 	if( $q->num_rows() ):		 	$trfs = $q->result_array();		 	foreach ($trfs as $tr):		 		if($tr['reftype']=='refund'):		 				 		$q0 = $this->db->query(						"SELECT aid,							ci_acctno,							pnno,							ci_name,							transdate						FROM nhgt_{$tr['frombranch']}.refund_que						WHERE status='approved'						AND aid={$tr['refid']}						AND cvrf='CV';					");				 	if( $q0->num_rows() ):						$param['datas'][] = array(							'id' 		 => $tr['aid'], 							'CI_AcctNo'  => $q0->row()->ci_acctno,							'LH_PN' 	 => $q0->row()->pnno,							'CI_Name' 	 => $q0->row()->ci_name,							'LH_LoanDate'=> $q0->row()->transdate,							'type' 		 => $tr['reftype'],							'branchcode' => $tr['frombranch'],							'frombranch' => $this->rsm->get_branch( $tr['frombranch'] )						);												endif;				elseif($tr['reftype']=='sales'):					$t = explode('.',$tr['refid']);					$q0 = $this->db->query(						"SELECT 							CI_AcctNo,							LH_PN,							CI_Name,							LH_LoanDate						FROM nhgt_{$tr['frombranch']}.ln_hdr						WHERE CI_AcctNo = '{$t[0]}'						AND LH_PN = '{$t[1]}'						GROUP BY CI_AcctNo, LH_PN;					");					if( $q0->num_rows() ):						$param['datas'][] = array(							'id'		 =>	$tr['aid'],							'CI_AcctNo'  => $q0->row()->CI_AcctNo,							'LH_PN' 	 => $q0->row()->LH_PN,							'CI_Name' 	 => $q0->row()->CI_Name,							'LH_LoanDate'=> $q0->row()->LH_LoanDate,							'type' 		 => $tr['reftype'],							'branchcode' => $tr['frombranch'],							'frombranch' => $this->rsm->get_branch( $tr['frombranch'] )						);						endif;				endif;		 				 	endforeach;	 			 	endif;				// 20150821FriRsm->Disbursement/Fund Transfer List		$q = $this->db->query(			"SELECT reference,				account1,				remarks,				trans_id,				trans_date,				trans_type			FROM tbl_disbursement			WHERE status='ForPrinting'			GROUP BY(reference);		")->result_array();				if(count($q)):			foreach ($q as $v)			{				if($v['trans_type'] == 'FT')				{					$param['datas'][] = array(						'id'		  => $v['trans_id'], // 20150821FriRsmAdded						'CI_AcctNo'	  => $v['account1'],						'LH_PN'		  => $v['reference'],						'CI_Name'	  => $v['remarks'],						'LH_LoanDate' => date('Y-m-d', strtotime($v['trans_date'])),						'type'		  => 'disbursement' 					);				}				elseif($v['trans_type'] == 'CFP')				{					$param['datas'][] = array(						'id'					=> $v['trans_id'],						'CI_AcctNo'		=> $v['trans_type'],						'LH_PN'				=> $v['reference'],						'CI_Name'			=> $v['remarks'],						'LH_LoanDate' => date('Y-m-d', strtotime($v['trans_date'])),						'type'				=> 'disbursement'					);				}				}		endif;		/** End Update 2015-04-29 **/				$this->load->view("sales/list/cv", $param);		return;	}	function paymentToList()	{		$CI_Name = $this->input->post('CI_Name')?$this->input->post('CI_Name'):'TURDANES';		$param['datas'] = $this->db->query(			"SELECT CI_AcctNo,				LH_PN,				CI_Name,				LH_Balance,				LH_LoanTrans			FROM ln_hdr			WHERE LH_IsPending='0'			AND LH_Processed='1'			AND LH_Cancelled='0'			AND LH_LoanTrans!='SPEC'			AND CI_Name LIKE '%".$CI_Name."%'			ORDER BY CI_Name,				LH_LoanDate			ASC;		")->result_array();				$this->load->view("sales/list/paymentto", $param);		return;	}		function loanApplicationForm()	{		$this->load->model('database');		$result = $this->database->getCutOff();		$datas['coDate'] = $result->value;				$this->load->view("sales/form/loanapplication", $datas);		return;	}		function loanProcessingForm()	{		$this->load->view("sales/form/loanprocessing");		return;	}		function checkvoucherform()	{		$query = $this->db->query("			SELECT code,				value			FROM parameter			WHERE code='CVNO'			LIMIT 1;		")->row();		$param['cvno'] = $query->value;				$param['banks'] = $this->db->query("			SELECT code,				value			FROM parameter			WHERE code='BANK'			ORDER BY value ASC;		")->result_array();						$param['datas'] = $this->db->query("			SELECT code,				value			FROM parameter			WHERE code='APPR'			OR code='CHECK'			OR code='PREP'			ORDER BY code ASC;		")->result_array();		$param['prepby'] = $this->session->userdata('user_name');		$pl = $this->db->query("			SELECT payee_cvname			FROM tbl_cvpayee			ORDER BY payee_cvname ASC;		")->result_array();		$param['payee'] = '';		foreach($pl as $v)		{			$payee = str_replace("'","\'",$v['payee_cvname']);			$param['payee'] .= "'{$payee}',";		}		$param['payee'] = substr($param['payee'], 0, strlen($param['payee'])-1);		$param['current_branch'] = str_replace('nhgt_', '', $this->db->database);		$param['branches'] = $this->db->query("			SELECT Branch_Name AS name			FROM nhgt_master.branch			WHERE branch_isactive=1			ORDER BY branch_name ASC;		")->result_array();		$this->load->view("sales/form/checkvoucherform", $param);		return;	}		function processLoan()	{		$this->load->helper('code');				$loanArray = array(			'LH_Atty1' => $_POST['LH_Atty1'],			'LH_Atty2' => $_POST['LH_Atty2'],			'LH_Atty3' => $_POST['LH_Atty3'],			'LH_IsTop' => '1',			'LH_IsLatest' => '1',			'LH_IncludeToList' => '1',			'LH_Processed' => '1',			'LH_ProcessedBy' => $this->session->userdata('user_name'),			'LH_ProcessedDate' => date('Y-m-d', strtotime($_POST['LH_LoanDate'])),		);		$this->db->where('CI_AcctNo', $_POST['CI_AcctNo']);		$this->db->where('LH_PN', $_POST['LH_PN']);		$this->db->update('ln_hdr', $loanArray) or die($this->db->_error_message());		die(trims("			<script>				window.parent.document.location.href='checkvoucher';			</script>		"));		return;	}	function cancelLoan()	{		$this->load->helper('code');				$CI_AcctNo = $this->uri->segment(3);		$LH_PN = $this->uri->segment(4);		$loanArray = array(			'LH_Cancelled' => '1',			'LH_CancelledBy' => $this->session->userdata('user_name'),			'LH_CancelledDate' => date('Y-m-d')		);		$this->db->where('CI_AcctNo', $CI_AcctNo);		$this->db->where('LH_PN', $LH_PN);		$this->db->update('ln_hdr', $loanArray) or die($this->db->_error_message());		die(trims("			<script>				window.parent.document.location.href='../../checkvoucher';			</script>		"));		return;	}		function cv_reload()	{		echo"			<script src='".asset_url()."/js/jquery.min.js'></script>			<script>				$('#cl', parent.document).contents().find('.isSelected').hide('slow');			</script>		";	}	function insertRefundCV()	{		$this->load->helper('code');		$this->load->model('rsm');		$current_branch = $this->rsm->branch();				$database='';		$rtype='R';		$istransfer = FALSE;		if(isset($_POST['b4'])&&$_POST['b4']):			$t = explode('|', $_POST['b4']);			$database = "nhgt_{$t[0]}.";			$rtype='ROB';			$istransfer = TRUE;			$frombranch = $t[1];		endif;		$acctno = $_POST['b0'];		$pn = explode(';', $_POST['b1']);		$pnno = $pn[0];		$date = $_POST['a2'];		$butalbalance = 0;				$this->db->select("cvdtlno");		$this->db->order_by('cvdtlno', 'DESC');		$this->db->limit(1);		$query = $this->db->get($database."tbl_cvheadr")		or die( $this->db->_error_message() );		if($query)		{			if($query->num_rows() == 0)			{				$nextCvdtl = 1;			} else			{				$q = $query->row();				$nextCvdtl = $q->cvdtlno + 1;			}		}				$this->db->trans_start();				$this->db->select("value");		$this->db->where("code", 'BRANCH');		$param = $this->db->get("parameter")->row();		$branch = $param->value;		$branch = explode(';', $branch);		$newCV = array(			'cvdtlno'  => $nextCvdtl,			'bcode'	   => $branch[0],			'cvno'	   => $_POST['a1'], 			'payee'	   => $acctno,			'ckno'	   => $_POST['a3'],			'cvdate'   => date('Y-m-d', strtotime($date)),			'ckamount' => $_POST['a4'],			'pnno'	   => $pnno,			'cvtype'   => $rtype, // R for Refund / ROB for Refund Other Branch			'bankid'   => $_POST['a7'],			'remarks'  => $_POST['a8']		);		$this->db->insert('tbl_cvheadr', $newCV)		or die( $this->db->_error_message() );				$query = $this->db->query("			SELECT value			FROM parameter			WHERE code='CVNO'			LIMIT 1		")->row();		$nextCvNo = trim($query->value);		$nextCvNo++;				$this->db->set('value', $nextCvNo);		$this->db->where('code', 'CVNO');		$this->db->update('parameter')		or die( $this->db->_error_message() );				$this->db->select("LH_BankAcctNo, LH_LoanTrans, LH_Balance");		$this->db->where('CI_AcctNo', $acctno);		$this->db->where('LH_PN', $pnno);		$loan = $this->db->get($database."ln_hdr")->row();				$now = date('Y-m-d');				if( $loan )		{			$balance = $loan->LH_Balance;						$this->db->select("ID, LL_IsPayment, LL_IsRefund");			$this->db->where('CI_AcctNo', $acctno);			$this->db->where('LH_PN', $pnno);			$this->db->where('LL_IsDeleted', '0');			$this->db->order_by('ID', 'DESC');			$this->db->limit(1);			$id = $this->db->get($database."ln_ldgr")			or die( $this->db->_error_message() );			$nextId = 0;			if( $id->num_rows() ):				$id = $id->row();				if( $id->LL_IsPayment == 1 && $id->LL_IsRefund == 0 )				{					$nextId = trim($id->ID);					$nextId++;				}				else if( $id->LL_IsPayment == 0 && $id->LL_IsRefund == 1 )				{					$nextId = trim($id->ID);				}			endif;			$ledgerArray = array(				'ID'					  => 1, //$nextId				'CI_AcctNo'				  => $acctno,				'LH_BranchCode_Processed' => $branch[0],				'LH_BankAcctNo'			  => $loan->LH_BankAcctNo,				'LH_PN'					  => $pnno,				'LH_LoanType'			  => $loan->LH_LoanTrans,				'RFW_NO'				  => 'CV#'.$_POST['a1'].'&CK#'.$_POST['a3'],				'LL_Rebates'			  => 0,				'LL_InterestAmt'		  => 0,				'LL_AmountCheck'		  => 0,				'LL_AmountCash'			  => 0,				'LL_AmountCash_Payment'	  => 0,				'LL_ShortPayment'		  => 0,				'LL_Refund'				  => $_POST['a4'],				'LL_Remarks'			  => $_POST['a8'],				'LL_PaymentDate'		  => date('Y-m-d', strtotime($date)),				'LL_Processed'			  => 1,				'LL_ProcessedDate'		  => date('Y-m-d H:i:s', strtotime($date)),				'LL_ProcessedBy'		  => $this->session->userdata('user_name'),				'LL_IsPayment'			  => 0,				'LL_IsRFW'				  => 1,				'LL_IsRefund'			  => 1,				'LL_CM'					  => 0,				'LL_IsBounceCheck'		  => 0,				'LL_IsBounceCheck'		  => 0,				'LL_IsUncollected'		  => 0,				'LL_IsShortPayment'		  => 0,				'LL_IsDeleted'			  => 0,				'LL_Posted_BySales'		  => 0,				'LL_Posted_ByAcct'		  => 0,				'LL_IsAdded'			  => 1,				'LL_IsModified'			  => 0			);			$this->db->insert($database.'ln_ldgr', $ledgerArray) or			die('line: 2745 '.$this->db->_error_message());			$balance += str_replace(',','',$_POST['a4']);			$this->db->set('LH_Balance', $balance);			$this->db->where('CI_AcctNo', $acctno);			$this->db->where('LH_PN', $pnno);			$this->db->update($database.'ln_hdr') or			die('line: 2753 '.$this->db->_error_message());		}		$this->db->select('colid, aid, advrefund, remarks');		$this->db->where('status', 'approved');		$this->db->where('cvrf', 'CV');		$this->db->where('ci_acctno', $acctno);		$this->db->where('pnno', $pnno);		$q = $this->db->get($database.'refund_que') or		die('line: 2762 '.$this->db->_error_message());				$aid = $q->row()->aid;		$colid = $q->row()->colid;		$advrefund = $q->row()->advrefund;		$remarks = $q->row()->remarks;		// 2015-08-24 Check if process is not Advance Refund		if($colid!=''&&strpos($remarks, 'ADVANCE')!==FALSE):					$butal = 0;			$tmp = explode('.', $colid);			foreach($tmp as $t):								$this->db->select('atmendbal');				$this->db->where('uid', $t);				$q0 = $this->db->get($database.'collection_entry') or				die('line: 2780 '.$this->db->_error_message());				$butal += $q0->row()->atmendbal;			endforeach;			// this is for butal balance included in the RFP			// get butal balance			$qbb = $this->db->query(				"SELECT SUM(credit)-SUM(debit) AS total				FROM $database"."refund_balance				WHERE ci_acctno='$acctno'				AND status='confirmed';			");			if($qbb->num_rows()):				$butalbalance = $qbb->row()->total;				$butal += $butalbalance;			endif;			// is have butal balance included.			if( $butalbalance ):								$datas = array(					'transdate'=>date('Y-m-d H:i:s'),					'aid'=> 0,					'ci_acctno'=> $acctno,					'debit'=> $butalbalance,					'credit'=> 0,					'status'=> 'confirmed',					'encby'=>$this->session->userdata('user_name')				);				$this->db->insert($database.'refund_balance', $datas) or				die('line: 2812 '.$this->db->_error_message());			endif;			// if have butal.			if(($butal-$_POST['a4'])>0):								$datas = array(					'transdate'=>date('Y-m-d H:i:s'),					'aid'=> $aid,					'ci_acctno'=> $acctno,					'debit'=> 0,					'credit'=> ($butal-$_POST['a4']),					'status'=> 'confirmed',					'encby'=>$this->session->userdata('user_name')				);				$this->db->insert($database.'refund_balance', $datas) or				die('line: 2830 '.$this->db->_error_message());			endif;					endif;		// if have advance refund		if($advrefund > 0):						$datas = array(				'id'=> 0,				'transdate'=>date('Y-m-d H:i:s'),				'aid'=> 0,				'ci_acctno'=> $acctno,				'remarks'=> $remarks,				'debit'=> $advrefund,				'credit'=> 0,				'status'=> 'confirmed',				'encby'=>$this->session->userdata('user_name')			);			$this->db->insert($database.'refund_balance', $datas) or			die('line: 2852 '.$this->db->_error_message());		endif;		$this->db->set('status', 'ok');		$this->db->where('aid', $aid);		$this->db->update($database.'refund_que') or		die('line: 2859 '.$this->db->_error_message());		if( $istransfer ):						// Branch 1 Entries e.g. "Santiago"			$cib = $this->rsm->get_office_account( $current_branch, $database );						$lastentryid = $this->rsm->get_last_entryid( $database );			$entry = array(				'entry_id'  => $lastentryid,				'ledger_id' => 4,				// Notes receivable				'dc'        => 'D',				'amount'    => $_POST['a4']			);			$this->db->insert($database."entry_items", $entry) or			die('line: 2876 '.$this->db->_error_message());			$ledgerid = $this->rsm->chartaccount_id( $cib, $database );			$entry = array(				'entry_id'  => $lastentryid,	// Office Account e.g. "San Juan"				'ledger_id' => $ledgerid,				'dc'        => 'C',				'amount'    =>  $_POST['a4']			);			$this->db->insert($database."entry_items", $entry) or			die('line: 2886 '.$this->db->_error_message());			$datas = array(				'id'		 => $lastentryid,				'entry_type' => 2,				// General Journal				'reference'  => '',				'number'     => $this->rsm->get_entry_number( 2, $database ),				'date'       => $now,				'dr_total'   => $_POST['a4'],				'cr_total'   => $_POST['a4'],				'narration'  => $_POST['a8']			);			$this->db->insert($database."entries", $datas) or			die('line: 2900 '.$this->db->_error_message());			// Branch 2 entries e.g "San Juan"			$cib = $_POST['a6'];			$lastentryid = $this->rsm->get_last_entryid();			$officecode = $this->rsm->get_office_account( $frombranch );			$officeid = $this->rsm->chartaccount_id( $officecode );			$entry = array(				'entry_id'  => $lastentryid,				'ledger_id' => $officeid,		// Office Account e.g. "Santiago"				'dc'        => 'D',				'amount'    => $_POST['a4']			);			$this->db->insert("entry_items", $entry) or			die('line: 2917 '.$this->db->_error_message());			$ledgerid = $this->rsm->chartaccount_id( $cib );			$entry = array(				'entry_id'  => $lastentryid,				'ledger_id' => $ledgerid,		// Cash in Bank				'dc'        => 'C',				'amount'    =>  $_POST['a4']			);			$this->db->insert("entry_items", $entry) or			die('line: 2927 '.$this->db->_error_message());			$datas = array(				'id'		 => $lastentryid,				'entry_type' => 4,				// Disbursement				'reference'  => '',				'number'     => $this->rsm->get_entry_number( 4 ),				'date'       => $now,				'dr_total'   => $_POST['a4'],				'cr_total'   => $_POST['a4'],				'narration'  => $_POST['a8']			);			$this->db->insert("entries", $datas) or			die('line: 2941 '.$this->db->_error_message());			$this->db->where('aid', $_POST['b5']);			$this->db->set('status', 'done');			$this->db->set('processby', $this->session->userdata('user_name'));			$this->db->set('processdate', date('Y-m-d H:i:s'));			$this->db->set('processref', 'CV#'.$_POST['a1'].'&CK#'.$_POST['a3']);			$this->db->update('nhgt_master.branch_transfer')			or die( $this->db->_error_message() );		else:			$cib = $_POST['a6'];			$lastentryid = $this->rsm->get_last_entryid();			$entry = array(				'entry_id'  => $lastentryid,				'ledger_id' => 4,					// Notes receivable				'dc'        => 'D',				'amount'    => $_POST['a4']			);			$this->db->insert($database."entry_items", $entry) or			die('line: 2963 '.$this->db->_error_message());			$ledgerid = $this->rsm->chartaccount_id( $cib );			$entry = array(				'entry_id'  => $lastentryid,				'ledger_id' => $ledgerid,			// Cash in Bank				'dc'        => 'C',				'amount'    =>  $_POST['a4']			);			$this->db->insert($database."entry_items", $entry) or			die('line: 2973 '.$this->db->_error_message());			$datas = array(				'id'		 => $lastentryid,				'entry_type' => 4,					// Disbursement				'reference'  => '',				'number'     => $this->rsm->get_entry_number( 4 ),				'date'       => $now,				'dr_total'   => $_POST['a4'],				'cr_total'   => $_POST['a4'],				'narration'  => $_POST['a8']			);			$this->db->insert("entries", $datas) or			die('line: 2987 '.$this->db->_error_message());		endif;				$this->db->trans_complete();				$this->cv_reload();	}	function insertSalesCV()	{		$this->load->helper('code');		$this->load->model('rsm');		$this->load->model('database');		$current_branch = $this->rsm->branch();				$database = '';		$rtype='S';		$istransfer = FALSE;				if(isset($_POST['b4'])&&$_POST['b4']):			$t = explode('|', $_POST['b4']);			$database = "nhgt_{$t[0]}.";			$rtype='SOB';			$istransfer = TRUE;			$frombranch = $t[1];		endif;				$this->db->select("cvdtlno");		$this->db->order_by('cvdtlno', 'DESC');		$this->db->limit(1);		$query = $this->db->get("tbl_cvheadr");				if($query)		{			if($query->num_rows() == 0)			{				$nextCvdtl = 1;			} else			{				$q = $query->row();				$nextCvdtl = $q->cvdtlno + 1;			}		}				//For multiple transaction		$this->db->trans_start();				$this->db->select("value");		$this->db->where("code", 'BRANCH');				$param = $this->db->get("parameter")->row();				$branch = $param->value;		$branch = explode(';', $branch);				$date = $_POST['a2'];		$pnno = $_POST['b1'];				$cvtype = 'S';		$re = 'NET PROCEEDS OF LOAN';				if(strpos($pnno, 'ADVANCE_BONUS') !== FALSE){			$cvtype = 'D';			$re = 'ADVANCE BONUS';		} elseif(strpos($pnno, 'ASI') !== FALSE) {			$cvtype = 'D';			$re = 'ADVANCE SSS INCREASE';		}				$newCV = array(			'cvdtlno'  => $nextCvdtl,			'bcode'	   => $branch[0],			'cvno'	   => $_POST['a1'], 			'payee'	   => $_POST['b0'],			'ckno'	   => $_POST['a3'],			'cvdate'   => date('Y-m-d', strtotime($date)),			'ckamount' => $_POST['a4'],			'pnno'	   => $pnno,			'cvtype'   => $cvtype,			'bankid'   => $_POST['a7'],			'remarks'  => $re		);				$this->db->insert('tbl_cvheadr', $newCV) or die( $this->db->_error_message() );				//Update CvNo of parameter		$query = $this->db->query("SELECT value FROM parameter WHERE code='CVNO' LIMIT 1")->row();		$nextCvNo = trim($query->value);				$nextCvNo++;		$this->db->set('value', $nextCvNo);		$this->db->where('code', 'CVNO');				$this->db->update('parameter') or die( $this->db->_error_message() );				//Update LH_IsPending of loan, Update LH_IsTop of ref loans		$acctno = $_POST['b0'];		$pn = explode(';', $_POST['b1']);		for($i=0;$i<count($pn)-1;$i++)		{			$this->db->select("LH_PN, CI_Name, LH_LoanAmt, LH_LoanTrans, LH_Reference, LH_BankAcctNo, LH_BankBranch, LH_Ref_OB, LH_OBC, LH_PaymentTo, LH_PaymentTo_Ref, LH_AdvPayment, LH_PaymentType, LH_Balance, LH_Terms, LH_StartDate, LH_EndDate, LH_WithdrawalDate");			$this->db->where("CI_AcctNo", $acctno);			$this->db->where("LH_PN", $pn[$i]);			$this->db->where("LH_Cancelled", 0);			$parent = $this->db->get($database."ln_hdr")->row();			//Close reference loans of Renewal Loans			$trans = $parent->LH_LoanTrans;			if($trans=='REN')			{				$LH_Remarks = 'RENEWAL';				$refpn = explode('|', $parent->LH_Reference);				$refob = explode(';', $parent->LH_Ref_OB);				$numref = count($refpn) - 1;				for($f=0;$f<=$numref;$f++)				{										$this->db->select("LH_Balance, LH_LoanTrans");					$this->db->where('CI_AcctNo', $acctno);					$this->db->where('LH_PN', $refpn[$f]);					$child = $this->db->get($database."ln_hdr")->row();										$LH_Balance = $child->LH_Balance - str_replace(',','',$refob[$i]);										$this->db->set("LH_Balance", $LH_Balance);					$this->db->set("LH_IsTop", 0);					$this->db->where('CI_AcctNo', $acctno);					$this->db->where('LH_PN', $refpn[$f]);					$this->db->update($database."ln_hdr") or die( $this->db->_error_message() );										$this->db->select("ID");					$this->db->where('CI_AcctNo', $acctno);					$this->db->where('LH_PN', $refpn[$f]);					$this->db->where('LL_IsPayment', '1');					$this->db->order_by('ID', 'DESC');					$this->db->limit(1);					$LnLdgr = $this->db->get($database."ln_ldgr");										$newPost = array(						'ID'					  					=> 0,						'CI_AcctNo'				  			=> $acctno,						'LH_BranchCode_Processed' => $branch[0],						'LH_BankAcctNo_Branch'	  => $parent->LH_BankAcctNo,						'LH_BankAcctNo'			  		=> $parent->LH_BankAcctNo,						'LH_BankCredit'			  		=> $_POST['a7'],						'LH_PN'					  				=> $refpn[$f],						'LH_LoanType'			  			=> $child->LH_LoanTrans,						'RFW_NO'				  				=> 'CV#' . ($_POST['a1'] == 0 ? '' : $_POST['a1']) . 'CK#' . $_POST['a3'],						'LL_Rebates'			  			=> 0,						'LL_InterestAmt'		  		=> 0,						'LL_AmountCheck'		  		=> str_replace(',','',$refob[$f]),						'LL_AmountCash'			  		=> 0,						'LL_AmountCash_Payment'	  => str_replace(',','',$refob[$f]),						'LL_ShortPayment'		  		=> 0,						'LL_Refund'				  			=> 0,						'LL_Remarks'			  			=> $LH_Remarks,						'LL_PaymentDate'		  		=> date('Y-m-d', strtotime($date)),						'LL_Processed'			  		=> 1,						'LL_ProcessedDate'		  	=> date('Y-m-d H:i:s', strtotime($date)),						'LL_ProcessedBy'		  		=> $this->session->userdata('user_name'),						'LL_PaymentType'		  		=> $parent->LH_PaymentType, // ATM / PB						'LL_IsPayment'			  		=> 1,						'LL_IsRFW'				  			=> 1,						'LL_IsRefund'			  			=> 0,						'LL_CM'					  				=> 0,						'LL_IsBounceCheck'		  	=> 0,						'LL_IsBounceCheck'		  	=> 0,						'LL_IsUncollected'		  	=> 0,						'LL_IsShortPayment'		  	=> 0,						'LL_IsDeleted'			  		=> 0,						'LL_Posted_BySales'		  	=> 0,						'LL_Posted_ByAcct'		  	=> 0,						'LL_IsAdded'			  			=> 1,						'LL_IsModified'			  		=> 0					);										$this->db->insert($database . 'ln_ldgr', $newPost) or die( $this->db->_error_message() );										// Update bills of Renewed Loans 					$this->db->set('status', 'closed');					$this->db->where('DATE_FORMAT(billdate,"%Y%m") >=', date('Ym',strtotime($parent->LH_StartDate)));					$this->db->where('CI_AcctNo', $acctno);					$this->db->where('LH_PN', $refpn[$f]);										$this->db->update('nhgt_bills.header') or die($this->db->_error_message());				}			} elseif($trans=='RES') {				$LH_Remarks = 'RESTRUCTURE';				$refpn = $parent->LH_Reference;				$this->db->select("LH_PN, LH_NetProceeds, LH_Balance, LH_LoanTrans");				$this->db->where('CI_AcctNo', $acctno);				$this->db->where('LH_PN', $refpn);								$child = $this->db->get($database . "ln_hdr")->row();								$this->db->set("LH_Balance", 0);				$this->db->set("LH_IsTop", 0);				$this->db->where('CI_AcctNo', $acctno);				$this->db->where('LH_PN', $child->LH_PN);								$this->db->update($database . "ln_hdr") or die( $this->db->_error_message() );									$newPost = array(					'ID'					  					=> 0,					'CI_AcctNo'				  			=> $acctno,					'LH_BranchCode_Processed' => $branch[0],					'LH_BankAcctNo_Branch'	  => $parent->LH_BankAcctNo,					'LH_BankAcctNo'			  		=> $parent->LH_BankAcctNo,					'LH_BankCredit'			  		=> $_POST['a7'],					'LH_PN'					  				=> $child->LH_PN,					'LH_LoanType'			  			=> $child->LH_LoanTrans,					'RFW_NO'				  				=> 'CV#' . ($_POST['a1'] == 0 ? '' : $_POST['a1']) . 'CK#' . $_POST['a3'],					'LL_Rebates'			  			=> 0,					'LL_InterestAmt'		  		=> 0,					'LL_AmountCheck'		  		=> str_replace(',', '', $child->LH_NetProceeds),					'LL_AmountCash'			  		=> 0,					'LL_AmountCash_Payment'	  => str_replace(',', '', $child->LH_NetProceeds),					'LL_ShortPayment'		  		=> 0,					'LL_Refund'				  			=> 0,					'LL_Remarks'			  			=> $LH_Remarks,					'LL_PaymentDate'		  		=> date('Y-m-d', strtotime($date)),					'LL_Processed'			  		=> 1,					'LL_ProcessedDate'		  	=> date('Y-m-d H:i:s', strtotime($date)),					'LL_ProcessedBy'		  		=> $this->session->userdata('user_name'),					'LL_PaymentType'		  		=> $parent->LH_PaymentType, // ATM / PB					'LL_IsPayment'			  		=> 0,					'LL_IsRFW'				  			=> 1,					'LL_IsRefund'			  			=> 1,					'LL_CM'					  				=> 0,					'LL_IsBounceCheck'		  	=> 0,					'LL_IsBounceCheck'		  	=> 0,					'LL_IsUncollected'		  	=> 0,					'LL_IsShortPayment'		  	=> 0,					'LL_IsDeleted'			  		=> 0,					'LL_Posted_BySales'		  	=> 0,					'LL_Posted_ByAcct'		  	=> 0,					'LL_IsAdded'			  			=> 1,					'LL_IsModified'			  		=> 0				);								$this->db->insert($database.'ln_ldgr', $newPost) or die( $this->db->_error_message() );								// Delete billing of reference loans 2015-08-01				$this->db->set('status', 'closed');				$this->db->where('CI_AcctNo', $acctno);				$this->db->where('LH_PN', $child->LH_PN);								$this->db->update('nhgt_bills.header') or die($this->db->_error_message());			}						elseif($trans == 'SPEC' || $trans == 'SPEC2')			{				if($trans == 'SPEC')				{					$LH_Remarks = 'ADVANCE BONUS ' . date('Y', strtotime($date));				} elseif($trans == 'SPEC2')				{					$LH_Remarks = 'ADVANCE SSS INCREASE';				}								$refpn = $parent->LH_Reference;				$this->db->select("LH_PN, LH_Balance, LH_LoanTrans");				$this->db->where('CI_AcctNo', $acctno);				$this->db->where('LH_PN', $refpn);								$child = $this->db->get($database . "ln_hdr")->row();									$newPost = array(					'ID'					  					=> 0,					'CI_AcctNo'				 				=> $acctno,					'LH_BranchCode_Processed' => $branch[0],					'LH_BankAcctNo_Branch'	  => $parent->LH_BankAcctNo,					'LH_BankAcctNo'			  		=> $parent->LH_BankAcctNo,					'LH_BankCredit'			  		=> $_POST['a7'],					'LH_PN'					  				=> $child->LH_PN,					'LH_LoanType'			  			=> $child->LH_LoanTrans,					'RFW_NO'				  				=> 'CV#' . ($_POST['a1'] == 0 ? '' : $_POST['a1']) . 'CK#' . $_POST['a3'],					'LL_Rebates'			  			=> 0,					'LL_InterestAmt'		  		=> 0,					'LL_AmountCheck'		  		=> 0,					'LL_AmountCash'			  		=> 0,					'LL_AmountCash_Payment'	  => 0,					'LL_ShortPayment'		  		=> 0,					'LL_Refund'				  			=> str_replace(',', '', $parent->LH_LoanAmt),					'LL_Remarks'			  			=> $LH_Remarks,					'LL_PaymentDate'		  		=> date('Y-m-d', strtotime($date)),					'LL_Processed'			  		=> 1,					'LL_ProcessedDate'		  	=> date('Y-m-d H:i:s', strtotime($date)),					'LL_ProcessedBy'		  		=> $this->session->userdata('user_name'),					'LL_PaymentType'		  		=> $parent->LH_PaymentType, // ATM / PB					'LL_IsPayment'			  		=> 0,					'LL_IsRFW'				  			=> 1,					'LL_IsRefund'			  			=> 1,					'LL_CM'					  				=> 0,					'LL_IsBounceCheck'		  	=> 0,					'LL_IsBounceCheck'		  	=> 0,					'LL_IsUncollected'		  	=> 0,					'LL_IsShortPayment'		  	=> 0,					'LL_IsDeleted'			 			=> 0,					'LL_Posted_BySales'		  	=> 0,					'LL_Posted_ByAcct'		  	=> 0,					'LL_IsAdded'			  			=> 1,					'LL_IsModified'			  		=> 0				);								$this->db->insert($database . 'ln_ldgr', $newPost) or die( $this->db->_error_message() );								// Insert billing for Advance Bonus??			}						$this->db->set("LH_IsTop", 1);			$this->db->set("LH_IsPending", 0);			$this->db->where("CI_AcctNo", $acctno);			$this->db->where("LH_PN", $pn[$i]);			$this->db->update($database.'ln_hdr') or die( $this->db->_error_message() );						/** PaymentTo_Ref **/			if($parent->LH_PaymentTo>0&&$parent->LH_PaymentTo_Ref!='')			{				$data = explode('|', $parent->LH_PaymentTo_Ref);				$this->db->select("ID");				$this->db->where('CI_AcctNo', $data[0]);				$this->db->where('LH_PN', $data[1]);				$this->db->where('LL_IsPayment', '1');				$this->db->order_by('ID', 'DESC');				$this->db->limit(1);				$LnLdgr = $this->db->get($database."ln_ldgr");								$this->db->select("LH_Balance, LH_LoanTrans");				$this->db->where('CI_AcctNo', $data[0]);				$this->db->where('LH_PN', $data[1]);				$refloan = $this->db->get($database."ln_hdr")->row();								$balance = $refloan->LH_Balance - $parent->LH_PaymentTo;								$this->db->set("LH_Balance", $balance);				$this->db->where('CI_AcctNo', $data[0]);				$this->db->where('LH_PN', $data[1]);				$this->db->update($database."ln_hdr") or die( $this->db->_error_message() );								$newPost = array(					'ID'					  					=> 0,					'CI_AcctNo'				  			=> $data[0],					'LH_BranchCode_Processed' => $branch[0],					'LH_BankAcctNo_Branch'	  => $parent->LH_BankAcctNo,					'LH_BankAcctNo'			  		=> $parent->LH_BankAcctNo,					'LH_BankCredit'			  		=> $_POST['a7'],					'LH_PN'					  				=> $data[1],					'LH_LoanType'			  			=> $refloan->LH_LoanTrans,					'RFW_NO'				  				=> 'CV#' . ($_POST['a1'] == 0 ? '' : $_POST['a1']) . 'CK#' . $_POST['a3'],					'LL_Rebates'			  			=> 0,					'LL_InterestAmt'					=> 0,					'LL_AmountCheck'		  		=> $parent->LH_PaymentTo,					'LL_AmountCash'			 			=> 0,					'LL_AmountCash_Payment'	  => $parent->LH_PaymentTo,					'LL_ShortPayment'		  		=> 0,					'LL_Refund'				  			=> 0,					'LL_Remarks'			  			=> 'PAYMENT FROM:' . $data[0],					'LL_PaymentDate'		  		=> date('Y-m-d', strtotime($date)),					'LL_Processed'			  		=> 1,					'LL_ProcessedDate'		  	=> date('Y-m-d H:i:s', strtotime($date)),					'LL_ProcessedBy'		  		=> $this->session->userdata('user_name'),					'LL_PaymentType'		  		=> $parent->LH_PaymentType,					'LL_IsPayment'			  		=> 1,					'LL_IsRFW'				  			=> 1,					'LL_IsRefund'			 				=> 0,					'LL_CM'					  				=> 0,					'LL_IsBounceCheck'		  	=> 0,					'LL_IsBounceCheck'		  	=> 0,					'LL_IsUncollected'		  	=> 0,					'LL_IsShortPayment'		  	=> 0,					'LL_IsDeleted'			  		=> 0,					'LL_Posted_BySales'		  	=> 0,					'LL_Posted_ByAcct'		  	=> 0,					'LL_IsAdded'			  			=> 1,					'LL_IsModified'			  		=> 0				);								$this->db->insert($database . 'ln_ldgr', $newPost) or die( $this->db->_error_message() );			}						// AdvPayment			if($parent->LH_AdvPayment>0)			{				$newPost = array(					'ID'					  => 1,					'CI_AcctNo'				  => $acctno,					'LH_BranchCode_Processed' => $branch[0],					'LH_BankAcctNo_Branch'	  => $parent->LH_BankAcctNo,					'LH_BankAcctNo'			  		=> $parent->LH_BankAcctNo,					'LH_BankCredit'			  		=> $_POST['a7'],					'LH_PN'					  				=> $pn[$i],					'LH_LoanType'			  			=> $parent->LH_LoanTrans,					'RFW_NO'				  				=> 'CV#' . ($_POST['a1'] == 0 ? '' : $_POST['a1']) . 'CK#' . $_POST['a3'],					'LL_Rebates'			  			=> 0,					'LL_InterestAmt'		  		=> 0,					'LL_AmountCheck'		  		=> $parent->LH_AdvPayment,					'LL_AmountCash'			  		=> 0,					'LL_AmountCash_Payment'		=> $parent->LH_AdvPayment,					'LL_ShortPayment'		  		=> 0,					'LL_Refund'				  			=> 0,					'LL_Remarks'			  			=> 'ADVANCE PAYMENT',					'LL_PaymentDate'		  		=> date('Y-m-d', strtotime($date)),					'LL_Processed'			  		=> 1,					'LL_ProcessedDate'		  	=> date('Y-m-d H:i:s', strtotime($date)),					'LL_ProcessedBy'		  		=> $this->session->userdata('user_name'),					'LL_PaymentType'		  		=> $parent->LH_PaymentType,					'LL_IsPayment'			  		=> 1,					'LL_IsRFW'				  			=> 1,					'LL_IsRefund'			  			=> 0,					'LL_CM'					  				=> 0,					'LL_IsBounceCheck'		  	=> 0,					'LL_IsBounceCheck'		  	=> 0,					'LL_IsUncollected'		  	=> 0,					'LL_IsShortPayment'		  	=> 0,					'LL_IsDeleted'			  		=> 0,					'LL_Posted_BySales'		  	=> 0,					'LL_Posted_ByAcct'		  	=> 0,					'LL_IsAdded'			  			=> 1,					'LL_IsModified'			  		=> 0				);								$this->db->insert($database.'ln_ldgr', $newPost) or die( $this->db->_error_message() );			}						// Billing Generation			if($trans!='SPEC')			{				$terms = $parent->LH_Terms;				$wthdrwldt = $parent->LH_WithdrawalDate;				$wthdrwldt = $wthdrwldt == 0 ? 1 : $wthdrwldt;				$pentype = 'SSS';				$startdate = strtotime($parent->LH_StartDate);								for($z=0;$z<$terms;$z++)				{					// Validation if billing w/ same CI_AcctNo, LH_PN and Year-Month already exists					$blldt = date('Y-m-t', strtotime('+'.$z.' month', $startdate));					$yrmo = explode('-', $blldt);					$intdate = intval(date('d', strtotime($blldt)));										if($wthdrwldt>$intdate)					{						$billdate = $yrmo[0].'-'.$yrmo[1].'-'.$intdate;						$billdate = date('Y-m-d', strtotime($billdate));					} else {						$billdate = $yrmo[0].'-'.$yrmo[1].'-'.$wthdrwldt;						$billdate = date('Y-m-d', strtotime($billdate));					}										$this->db->select('*');					$this->db->from('nhgt_bills.header');					$this->db->where('CI_AcctNo', $acctno);					$this->db->where('LH_PN', $parent->LH_PN);					$this->db->where('billdate', $billdate);										$bill = $this->db->get();										$status = NULL;										if($parent->LH_LoanTrans == 'SPEC2')					{						$status = 'asi';					}										if($bill->num_rows()==0)					{						$data = array(							'billtype' 			=> 'auto',							'branchcode' 		=> $branch[0],							'CI_AcctNo' 		=> $acctno,							'LH_PN' 				=> $parent->LH_PN,							'loantrans' 		=> $parent->LH_LoanTrans,							'billdate' 			=> $billdate,							'name' 					=> $parent->CI_Name,							'paytype' 			=> $parent->LH_PaymentType,							'bankacctno' 		=> $parent->LH_BankAcctNo,							'bankbranch' 		=> $parent->LH_BankBranch,							'pentype' 			=> $pentype,							'duration' 			=> date('F Y', strtotime($parent->LH_StartDate)) . ' - ' . date('F Y', strtotime($parent->LH_EndDate)),							'terms' 				=> $terms,							'balance' 			=> $parent->LH_Balance,							'amtodrawn' 		=> $parent->LH_LoanAmt,							'generateby' 		=> $this->session->userdata('user_name'),							'dategenerate' 	=> date('Y-m-d H:i:s'),							'collectby' 		=> '',							'datecollected' => date('0000-00-00 00:00:00'),							'status'				=> $status						);												$this->db->insert('nhgt_bills.header', $data)						or die($this->db->_error_message());					}				}			}						// Key variable $trans = 'SPEC';			switch($trans)			{				case'NEW':case'REN':				case'ADD':case'EXT':				case'RES':					$linfo = $this->rsm->get_pn_details( $acctno, $pn[$i], $database );					$dr = 0; $cr = 0;					if( $linfo->num_rows() ):						if( $istransfer ):										// Branch 1 Entries e.g. "Santiago"													$cib = $this->rsm->get_office_account( $current_branch, $database );							$lastentryid = $this->rsm->get_last_entryid( $database );							$linfo = $linfo->row();							$now = date('Y-m-d');							$entry = array(								'entry_id'  => $lastentryid,								'ledger_id' => 4,					// Notes receivable								'dc'        => 'D',								'amount'    => $linfo->LH_Principal // Principal							);							$this->db->insert($database."entry_items", $entry);							$dr+=$linfo->LH_Principal;							if( $linfo->LH_ProcFee ):								$entry = array(									'entry_id'  => $lastentryid,									'ledger_id' => 32,				//Processing fee									'dc'        => 'C',									'amount'    => $linfo->LH_ProcFee								);								$this->db->insert($database."entry_items", $entry);								$cr+=$linfo->LH_ProcFee;							endif;							if( $linfo->LH_InterestAmt ):								$entry = array(									'entry_id'  => $lastentryid,									'ledger_id' => 31,				//Interest income									'dc'        => 'C',									'amount'    => $linfo->LH_InterestAmt								);								$this->db->insert($database."entry_items", $entry);								$cr+=$linfo->LH_InterestAmt;							endif;							if( $linfo->LH_CollFee ):								$entry = array(									'entry_id'  => $lastentryid,									'ledger_id' => 110,				// Other charges									'dc'        => 'C',									'amount'    => $linfo->LH_CollFee								);								$this->db->insert($database."entry_items", $entry);								$cr+=$linfo->LH_CollFee;							endif;							if( $linfo->LH_OBC ):								$entry = array(									'entry_id'  => $lastentryid,									'ledger_id' => 4,				// Outstanding balance 									'dc'        => 'C',				// Notes Receivable									'amount'    => $linfo->LH_OBC								);								$this->db->insert($database."entry_items", $entry);								$cr+=$linfo->LH_OBC;							endif;							if( $linfo->LH_NetProceeds ):								$ledgerid = $this->rsm->chartaccount_id( $cib, $database );								$entry = array(									'entry_id'  => $lastentryid,	// San Juan Office 									'ledger_id' => $ledgerid,									'dc'        => 'C',									'amount'    => $linfo->LH_NetProceeds								);								$this->db->insert($database."entry_items", $entry);								$cr+=$linfo->LH_NetProceeds;							endif;														$datas = array(								'id'		 => $lastentryid,								'entry_type' => 2,					// General journal								'reference'  => '',								'number'     => $this->rsm->get_entry_number( 2, $database ),								'date'       => $now,								'dr_total'   => $dr,								'cr_total'   => $cr,								'narration'  => "NET PROCEEDS OF LOAN\r".												$this->rsm->get_loantrans( $trans )							);							$this->db->insert($database."entries", $datas) or die( $this->db->_error_message() );							// Branch 2 entries e.g "San Juan"							$cib = $_POST['a6'];							$lastentryid = $this->rsm->get_last_entryid();							$officecode = $this->rsm->get_office_account( $frombranch );							$officeid = $this->rsm->chartaccount_id( $officecode );							$entry = array(								'entry_id'  => $lastentryid,								'ledger_id' => $officeid,		// Office Account e.g. "Santiago"								'dc'        => 'D',								'amount'    => $linfo->LH_NetProceeds							);							$this->db->insert("entry_items", $entry) or							die('line: 3581 '.$this->db->_error_message());							$ledgerid = $this->rsm->chartaccount_id( $cib );							$entry = array(								'entry_id'  => $lastentryid,								'ledger_id' => $ledgerid,		// Cash in Bank								'dc'        => 'C',								'amount'    =>  $linfo->LH_NetProceeds							);							$this->db->insert("entry_items", $entry) or							die('line: 3591 '.$this->db->_error_message());							$datas = array(								'id'		 => $lastentryid,								'entry_type' => 3,				// Sales book								'reference'  => '',								'number'     => $this->rsm->get_entry_number( 3 ),								'date'       => $now,								'dr_total'   => $linfo->LH_NetProceeds,								'cr_total'   => $linfo->LH_NetProceeds,								'narration'  => "NET PROCEEDS OF LOAN\r".												$this->rsm->get_loantrans( $trans )							);							$this->db->insert("entries", $datas) or							die('line: 3606 '.$this->db->_error_message());							$this->db->where('aid', $_POST['b5']);							$this->db->set('status', 'done');							$this->db->set('processby', $this->session->userdata('user_name'));							$this->db->set('processdate', date('Y-m-d H:i:s'));							$this->db->set('processref', 'CV#'.$_POST['a1'].'&CK#'.$_POST['a3']);							$this->db->update('nhgt_master.branch_transfer')							or die( $this->db->_error_message() );						else:							$linfo = $linfo->row();														$lastentryid = $this->rsm->get_last_entryid();							$now = date('Y-m-d');							$entry = array(								'entry_id'  => $lastentryid,								'ledger_id' => 4,					// Notes receivable								'dc'        => 'D',								'amount'    => $linfo->LH_Principal // Principal							);							$this->db->insert("entry_items", $entry);							$dr+=$linfo->LH_Principal;							if( $linfo->LH_ProcFee ):								$entry = array(									'entry_id'  => $lastentryid,									'ledger_id' => 32,				//Processing fee									'dc'        => 'C',									'amount'    => $linfo->LH_ProcFee								);								$this->db->insert("entry_items", $entry);								$cr+=$linfo->LH_ProcFee;							endif;							if( $linfo->LH_InterestAmt ):								$entry = array(									'entry_id'  => $lastentryid,									'ledger_id' => 31,				//Interest income									'dc'        => 'C',									'amount'    => $linfo->LH_InterestAmt								);								$this->db->insert("entry_items", $entry);								$cr+=$linfo->LH_InterestAmt;							endif;							if( $linfo->LH_CollFee ):								$entry = array(									'entry_id'  => $lastentryid,									'ledger_id' => 110,				// Other charges									'dc'        => 'C',									'amount'    => $linfo->LH_CollFee								);								$this->db->insert("entry_items", $entry);								$cr+=$linfo->LH_CollFee;							endif;							if( $linfo->LH_OBC ):								$entry = array(									'entry_id'  => $lastentryid,									'ledger_id' => 4,				// Outstanding balance 									'dc'        => 'C',				// Notes Receivable									'amount'    => $linfo->LH_OBC								);								$this->db->insert("entry_items", $entry);								$cr+=$linfo->LH_OBC;							endif;							if( $linfo->LH_NetProceeds ):								$ledgerid = $this->rsm->chartaccount_id( $_POST['a6'] );								$entry = array(									'entry_id'  => $lastentryid,	// Cash in Bank									'ledger_id' => $ledgerid,									'dc'        => 'C',									'amount'    => $linfo->LH_NetProceeds								);								$this->db->insert("entry_items", $entry);								$cr+=$linfo->LH_NetProceeds;							endif;														$datas = array(								'id'		 => $lastentryid,								'entry_type' => 3,					// Sales book								'reference'  => '',								'number'     => $this->rsm->get_entry_number( 3 ),								'date'       => $now,								'dr_total'   => $dr,								'cr_total'   => $cr,								'narration'  => "NET PROCEEDS OF LOAN\r".												$this->rsm->get_loantrans( $trans )							);							$this->db->insert("entries", $datas) or die( $this->db->_error_message() );						endif;					endif;				break;			// ADVANCE BONUS ENTRIES			// RSM 2015-07-30 11:40				case'SPEC':case'SPEC2':					$linfo = $this->rsm->get_pn_details( $acctno, $pn[$i], $database );					if( $istransfer ):						$cib = $this->rsm->get_office_account( $current_branch, $database );						$lastentryid = $this->rsm->get_last_entryid( $database );						$dr = 0; $cr = 0;						if( $linfo->num_rows() ):							$linfo = $linfo->row();							$now = date('Y-m-d');							$entry = array(								'entry_id'  => $lastentryid,								'ledger_id' => 4,					// Notes receivable								'dc'        => 'D',								'amount'    => $linfo->LH_Principal // Principal							);							$this->db->insert($database."entry_items", $entry);							$dr+=$linfo->LH_Principal;							if( $linfo->LH_InterestAmt ):								$entry = array(									'entry_id'  => $lastentryid,									'ledger_id' => 163,				// Interest income									'dc'        => 'C',									'amount'    => $linfo->LH_InterestAmt								);								$this->db->insert($database."entry_items", $entry);								$cr+=$linfo->LH_InterestAmt;							endif;							if( $linfo->LH_NetProceeds ):								$ledgerid = $this->rsm->chartaccount_id( $cib, $database );								$entry = array(									'entry_id'  => $lastentryid,										'ledger_id' => $ledgerid,		// Office Account									'dc'        => 'C',									'amount'    => $linfo->LH_NetProceeds								);								$this->db->insert($database."entry_items", $entry);								$cr+=$linfo->LH_NetProceeds;							endif;														$datas = array(								'id'		 => $lastentryid,								'entry_type' => 2,					// General journal								'reference'  => '',								'number'     => $this->rsm->get_entry_number( 2, $database ),								'date'       => $now,								'dr_total'   => $dr,								'cr_total'   => $cr,								'narration'  => "ADVANCE BONUS ".date('Y',strtotime($date))							);							$this->db->insert($database."entries", $datas)							or die( $this->db->_error_message() );							// Branch 2 entries e.g "San Juan"							$cib = $_POST['a6'];							$lastentryid = $this->rsm->get_last_entryid();							$officecode = $this->rsm->get_office_account( $frombranch );							$officeid = $this->rsm->chartaccount_id( $officecode );							$entry = array(								'entry_id'  => $lastentryid,								'ledger_id' => $officeid,		// Office Account e.g. "Santiago"								'dc'        => 'D',								'amount'    => $linfo->LH_NetProceeds							);							$this->db->insert("entry_items", $entry) or							die('line: 3795 '.$this->db->_error_message());							$ledgerid = $this->rsm->chartaccount_id( $cib );							$entry = array(								'entry_id'  => $lastentryid,								'ledger_id' => $ledgerid,		// Cash in Bank								'dc'        => 'C',								'amount'    =>  $linfo->LH_NetProceeds							);							$this->db->insert("entry_items", $entry) or							die('line: 3805 '.$this->db->_error_message());							$datas = array(								'id'		 => $lastentryid,								'entry_type' => 4,				// Disbursement book								'reference'  => '',								'number'     => $this->rsm->get_entry_number( 4 ),								'date'       => $now,								'dr_total'   => $dr,								'cr_total'   => $cr,								'narration'  => "ADVANCE BONUS ".date('Y',strtotime($date))							);							$this->db->insert("entries", $datas) or							die('line: 3819 '.$this->db->_error_message());							$this->db->where('aid', $_POST['b5']);							$this->db->set('status', 'done');							$this->db->set('processby', $this->session->userdata('user_name'));							$this->db->set('processdate', date('Y-m-d H:i:s'));							$this->db->set('processref', 'CV#'.$_POST['a1'].'&CK#'.$_POST['a3']);							$this->db->update('nhgt_master.branch_transfer')							or die( $this->db->_error_message() );						endif;					else:						$lastentryid = $this->rsm->get_last_entryid();						$dr = 0; $cr = 0;						if( $linfo->num_rows() ):							$linfo = $linfo->row();							$now = date('Y-m-d');							$entry = array(								'entry_id'  => $lastentryid,								'ledger_id' => 4,					// Notes receivable								'dc'        => 'D',								'amount'    => $linfo->LH_Principal // Principal							);							$this->db->insert("entry_items", $entry);							$dr+=$linfo->LH_Principal;							if( $linfo->LH_InterestAmt ):								$entry = array(									'entry_id'  => $lastentryid,									'ledger_id' => 163,				// Interest income									'dc'        => 'C',									'amount'    => $linfo->LH_InterestAmt								);								$this->db->insert("entry_items", $entry);								$cr+=$linfo->LH_InterestAmt;							endif;							if( $linfo->LH_NetProceeds ):								$ledgerid = $this->rsm->chartaccount_id( $_POST['a6'] );								$entry = array(									'entry_id'  => $lastentryid,	// Cash in Bank									'ledger_id' => $ledgerid,									'dc'        => 'C',									'amount'    => $linfo->LH_NetProceeds								);								$this->db->insert("entry_items", $entry);								$cr+=$linfo->LH_NetProceeds;							endif;														$datas = array(								'id'		 => $lastentryid,								'entry_type' => 4,					// Disbursement book								'reference'  => '',								'number'     => $this->rsm->get_entry_number( 4 ),								'date'       => $now,								'dr_total'   => $dr,								'cr_total'   => $cr,								'narration'  => "ADVANCE BONUS ".date('Y',strtotime($date))							);							$this->db->insert("entries", $datas) or die( $this->db->_error_message() );						endif;					endif;				break;			}				}				$this->db->trans_complete();				$this->cv_reload();	}	function insertDisbursementCV()	{		$this->load->helper('code');		$this->load->model('rsm');				$this->db->trans_start();				$account1 = $_POST['b0'];		$data = explode(';', $_POST['b1']);		$rem = explode(';', $_POST['b2']);				$this->db->select("cvdtlno");		$this->db->order_by('cvdtlno', 'DESC');		$this->db->limit(1);				$query = $this->db->get("tbl_cvheadr");				if($query)		{			if($query->num_rows() == 0)			{				$nextCvdtl = 1;			}			else			{				$q = $query->row();				$nextCvdtl = $q->cvdtlno + 1;			}		}				$this->db->select("value");		$this->db->where("code", 'BRANCH');		$param = $this->db->get("parameter")->row();				$branch = $param->value;		$branch = explode(';', $branch);		$newCV = array(			'cvdtlno'  => $nextCvdtl,			'bcode'	   => $branch[0],			'cvno'	   => $_POST['a1'], // CV No.			'payee'	   => 'CASH',			'ckno'	   => $_POST['a3'], // Check No.			'cvdate'   => date('Y-m-d', strtotime($_POST['a2'])),			'ckamount' => $_POST['a4'], // Amount			'pnno'	   => 'FT',			'cvtype'   => 'F', // F for FundTransfer			'bankid'   => $_POST['a7'],			'remarks'  => $_POST['a8']		);		$this->db->insert('tbl_cvheadr', $newCV) or		die('line: 1996 '.$this->db->_error_message());					for($i=0;$i<count($data)-1;$i++)		{			$a = explode('|', $data[$i]);			$this->db->set('status', 'Ok');			$this->db->set('process_by', $this->session->userdata('user_name'));			$this->db->set('process_date', date('Y-m-d'));			$this->db->where('account1', $account1);			$this->db->where('account2', $a[1]);			$this->db->where('reference', $a[0]);			$this->db->where('status', 'ForPrinting');			$this->db->update("tbl_disbursement") or			die('line: 1958 '.$this->db->_error_message());					/** Accounting Entries **/			$datenow = date('Y-m-d H:i:s');			$tmp = explode( '|', $this->input->post('b1') );			$ftid = $tmp[0];			unset($tmp);			$q = $this->db->query("SELECT code1, code2, amount, remarks				FROM ft_request				WHERE ftid=$ftid				AND code2 LIKE '{$a[1]}%';			") or die('line: 2007 '.$this->db->_error_message());			$q = $q->row();			$code1 = explode('|', $q->code1);			$code2 = explode('|', $q->code2);			$amount = $q->amount;			$remarks = $q->remarks;			unset($q);						$this->db->select('branchcode, branch');			$this->db->where('code', $code1[1]);			$q = $this->db->get('nhgt_master.bankaccts') or			die('line: 2019 '.$this->db->_error_message());			$q = $q->row();			$code1[2] = $q->branchcode;			$code1[3] = $q->branch;			unset($q);			$this->db->select('branchcode, branch');			$this->db->where('code', $code2[1]);			$q = $this->db->get('nhgt_master.bankaccts') or			die('line: 2029 '.$this->db->_error_message());			$q = $q->row();			$code2[2] = $q->branchcode;			$code2[3] = $q->branch;			unset($q);			/*print_r($code1);echo'<br>';			print_r($code2);echo'<br>';*/						$lastentryid = $this->rsm->get_last_entryid();			$entry = array(				'entry_id'  => $lastentryid,				'ledger_id' => $this->rsm->chartaccount_id( $code2[2] ),				'dc'        => 'D',				'amount'    => $amount			);			$this->db->insert("entry_items", $entry) or			die('line: 2045 '.$this->db->_error_message());			$entry = array(				'entry_id'  => $lastentryid,				'ledger_id' => $this->rsm->chartaccount_id( $code1[1] ),				'dc'        => 'C',				'amount'    => $amount			);			$this->db->insert("entry_items", $entry) or			die('line: 2054 '.$this->db->_error_message());						$datas = array(				'id'		 => $lastentryid,				'entry_type' => 4,					// Disbursement				'reference'  => '',				'number'     => $this->rsm->get_entry_number( 4 ),				'date'       => $datenow,				'dr_total'   => $amount,				'cr_total'   => $amount,				'narration'  => $remarks			);			$this->db->insert("entries", $datas) or			die('line: 2067 '.$this->db->_error_message());			/*//////////////////////////			Array ( [0] => 161297100017 [1] => 1039 [2] => 1313 [3] => alaminos ) 			Array ( [0] => 000798022476 [1] => 1044 [2] => 1314 [3] => baguio ) 			*/			$lastentryid = $this->rsm->get_last_entryid( 'nhgt_'.$code2[3] );			$entry = array(				'entry_id'  => $lastentryid,				'ledger_id' => $this->rsm->chartaccount_id( $code2[1], 'nhgt_'.$code2[3] ),				'dc'        => 'D',				'amount'    => $amount			);			$this->db->insert('nhgt_'.$code2[3].".entry_items", $entry) or			die('line: 2080 '.$this->db->_error_message());			$entry = array(				'entry_id'  => $lastentryid,				'ledger_id' => $this->rsm->chartaccount_id( $code1[2], 'nhgt_'.$code2[3] ),				'dc'        => 'C',				'amount'    => $amount			);			$this->db->insert('nhgt_'.$code2[3].".entry_items", $entry) or			die('line: 2089 '.$this->db->_error_message());						$datas = array(				'id'		 => $lastentryid,				'entry_type' => 2,			// General journal				'reference'  => '',				'number'     => $this->rsm->get_entry_number( 2, 'nhgt_'.$code2[3] ),				'date'       => $datenow,				'dr_total'   => $amount,				'cr_total'   => $amount,				'narration'  => $remarks			);			$this->db->insert("nhgt_".$code2[3].".entries", $datas) or $err = true;						if(isset($err)&&$err):				print_r($data);				echo'<br>';				print_r($code2);				echo'<br>Line: 4112';			endif;		}				$this->db->trans_complete();				$this->cv_reload();	}		function documents()	{		$current_branch = str_replace('nhgt_', '', $this->db->database);				$ciacctno = $this->uri->segment(3, '');		$pnno = $this->uri->segment(4, '');		$param[''] = '';				if($ciacctno && $pnno)		{			// Check branch_transfer table for sales transfer			$this->db->select('frombranch', false);			$this->db->from('nhgt_master.branch_transfer');			$this->db->where('tobranch', $current_branch);			$this->db->where('status', 'forProcess');			$this->db->where('refid', $ciacctno . '.' . $pnno);			$this->db->where('reftype', 'sales');			$query_bt = $this->db->get();						$database = '';						if($query_bt->num_rows > 0)			{				$qbt = $query_bt->row();								$database = 'nhgt_' . $qbt->frombranch . '.';			}						$result = $this->db->query("				SELECT *				FROM " . $database . "ln_hdr				WHERE CI_AcctNo = '" . $ciacctno . "'				AND LH_PN = '" . $pnno . "'				AND LH_Cancelled = 0;			");						$param['datas'] = $result->result_array();			$LnHdr = $result->row();						if($LnHdr->LH_PaymentTo > 0)			{				$data = explode('|', $LnHdr->LH_PaymentTo_Ref);				$query = $this->db->query("					SELECT CONCAT(CI_LName, ', ', CI_FName, ' ', CI_MName) as name					FROM " . $database . "client					WHERE CI_AcctNo = '" . $data[0] . "';				")->row();								$param['payto'] = $query->name;			}						$agent1 = $this->db->query("				SELECT CONCAT(AI_LName, ', ', AI_FName, ' ', AI_MName) as name				FROM " . $database . "agent				WHERE AI_RefNo = '" . $LnHdr->LH_Agent1 . "'			")->row();						if($agent1)			{				$param['agent1name'] = $agent1->name;			} else {				$param['agent1name'] = '';			}						if($LnHdr->LH_CoMaker)			{				$cm = $this->db->query("					SELECT CONCAT(CM_LName, ', ', CM_FName, ' ', CM_MName) as name,						CM_Add1,						CM_CedulaNo,						CM_CedulaPlace,						CM_CedulaDate					FROM " . $database . "comaker					WHERE CM_RefNo = '" . $LnHdr->LH_CoMaker . "'				")->row();								$param['cmname'] = $cm->name;				$param['cmadd1'] = $cm->CM_Add1;				$param['cmcedulano'] = $cm->CM_CedulaNo;				$param['cmcedulaplace'] = $cm->CM_CedulaPlace;				$param['cmceduladate'] = $cm->CM_CedulaDate;			}						$client = $faxno = $this->db->query("				SELECT CI_Bdate				FROM " . $database . "client				WHERE CI_AcctNo = '" . $ciacctno . "';			")->row();						$param['bdate'] = $client->CI_Bdate;						$company = $this->db->query("				SELECT value				FROM parameter				WHERE code = 'COMPANY';			")->row();						$company = explode(';', $company->value);			$param['companyname'] = $company[1];			$param['companyaddress'] = $company[2];						$vicepres = $this->db->query("				SELECT value				FROM parameter				WHERE code = 'VICEPRES';			")->row();						$param['vicepres'] = $vicepres->value;						$atty = $this->db->query("				SELECT value				FROM parameter				WHERE code LIKE '%ATTY%'				ORDER BY code ASC;			");						$param['atty'] = $atty->result_array();						$telno = $this->db->query("				SELECT value				FROM parameter				WHERE code = 'TELNO';			")->row();						$param['telno'] = $telno->value;									$faxno = $this->db->query("				SELECT value				FROM parameter				WHERE code = 'FAXNO';			")->row();						$param['faxno'] = $faxno->value;						$this->load->model('database');			$param['bname'] = $this->database->get_bname($LnHdr->LH_BranchCode);						$result = $this->database->getRates();			$rates = explode(';', $result->value);						if($LnHdr->LH_LoanTrans == 'EXT')			{				$param['rate'] = $rates[4] * 100; // EXTENSION			} else {				$param['rate'] = $rates[0] * 100;			}		}				$param['x'][0] = '36px';		$param['x'][1] = '70px';		$param['x'][2] = '95px';		$param['y'][0] = '230px';		$param['y'][1] = '220px';		$param['y'][2] = '70px';		$param['y'][3] = '231px';		$param['y'][4] = '290px';		$param['y'][5] = '320px';		$param['y'][6] = '95px';		$param['y'][7] = '70px';				$param['y'][8] = '320px'; // Amountt of Pension		$param['y'][9] = '135px'; // PN Amount				$result = $this->master_model->fetch_branch_code();		$result = explode(';', $result->value);		$param['branch_code'] = $result[0];				if($param['branch_code'] == 'SZB')		{			$param['x'][0] = '120px';			$param['x'][1] = '60px';			$param['y'][0] = '265px';			$param['y'][1] = '340px';			$param['y'][2] = '205px';			$param['y'][3] = '351px';			$param['y'][4] = '305px';			$param['y'][5] = '440px';		} elseif($param['branch_code'] == 'ALB') {			$param['x'][0] = '115px';			$param['x'][1] = '90px';			$param['y'][6] = '135px';			$param['y'][7] = '100px';		} elseif($param['branch_code'] == 'BTB') {			$param['x'][0] = '100px';			$param['y'][8] = '290px';			$param['y'][9] = '100px';		}				$this->load->view('sales/print/documents', $param);	}		function cvsales()	{		$param['cvno'] = $this->uri->segment(4, '');		$param['date'] = $this->uri->segment(5, '');		$param['ckno'] = $this->uri->segment(6, '');		$param['amt'] = $this->uri->segment(7, '');		$bank = explode(';', $this->uri->segment(8, ''));		$param['bank'] = $bank[1];		$param['re'] = $this->uri->segment(9, '');		$loantrans = $this->uri->segment(10, '');		$acctno = $this->uri->segment(12, '');		$param['loantrans'] = $loantrans;				$database='';				if($this->uri->segment(14, '') == 'transfer'):			$t = explode('|', $this->uri->segment(15, ''));			$database = "nhgt_{$t[0]}.";		endif;		if(strpos($param['re'], 'NET PROCEEDS OF LOAN') !==FALSE || strpos($param['re'], 'EXCESS')!==FALSE|| strpos($param['re'], 'REFUND') !== FALSE)		{			$client = $this->db->query(				"SELECT CONCAT(CI_FName, ' ', SUBSTR(CI_MName,1,1), '.', ' ', CI_LName) as name,					CI_Add1 as address				FROM $database"."client				WHERE CI_AcctNo='".$acctno."'			")->row();						$param['payee'] = $client->name;			$param['address'] = $client->address;		} else {			$param['payee'] = $this->uri->segment(3, '');			$param['address'] = '&nbsp;';		}				if(strpos($param['re'], 'NET PROCEEDS OF LOAN') !== FALSE || strpos($param['re'], 'EXCESS') !== FALSE || strpos($param['re'], 'REFUND') !== FALSE)		{			$checkedby='CHECK';		} else {			$checkedby='CHECKACCT';		}				$param['datas'] = $this->db->query("			SELECT code,				value			FROM parameter			WHERE code='APPR'			OR code='" . $checkedby . "'			OR code='PREP'			ORDER BY code ASC;		")->result_array();				$param['preparedby'] = $this->session->userdata('user_name');				$query = $this->db->query("			SELECT value			FROM parameter			WHERE code='PREP';		")->row();		$param['oic'] = $query->value; 				$query = $this->db->query("			SELECT code,				value			FROM parameter			WHERE code='COMPANY'		")->row();				$data = explode(';', $query->value);		$param['companyname'] = $data[0];				$this->load->model('database');		$result = $this->database->getBranch();		$branch = explode(';', $result->value);		$param['branchcode'] = $branch[0];				$param['x'] = '105px';		$param['y'] = '240px';		$param['z'][0] = '15px';		$param['z'][1] = '19px';				if($param['branchcode'] == 'DB')		{			$param['x'] = '120px';			$param['y'] = '220px';			$param['z'][0] = '27px';		} elseif($param['branchcode']=='NB') {			$param['z'][0] = '12px';			$param['z'][1] = '17px';		} elseif($param['branchcode']=='SNVB') {			$param['x'] = '110px';			$param['y'] = '245px';		} elseif($param['branchcode']=='SPB') {			$param['x'] = '125px';			$param['y'] = '220px';		} 				if($param['re']=='NET PROCEEDS OF LOAN')		{			$CI_AcctNo = $this->uri->segment(12, '');			$LH_PN = $this->uri->segment(13, '');			$query = $this->db->query("				SELECT LH_LoanAmt,					LH_Principal,					LH_NetProceeds,					LH_InterestAmt,					LH_OBC,					LH_ProcFee,					LH_CollFee,					LH_AdvPayment,					LH_PaymentTo,					LH_Terms				FROM $database"."ln_hdr				WHERE CI_AcctNo = '".$CI_AcctNo."'				AND LH_PN = '".$LH_PN."'				AND LH_IsPending = 1				AND LH_Processed = 1				AND LH_Cancelled != 1;			")->row();						$param['loanamt'] = $query->LH_LoanAmt;			$param['principal'] = $query->LH_Principal;			$param['netproceeds'] = $query->LH_NetProceeds;			$param['interest'] = $query->LH_InterestAmt;			$param['procfee'] = $query->LH_ProcFee;			$param['collfee'] = $query->LH_CollFee;			$param['nr'] = $query->LH_OBC + $query->LH_AdvPayment + $query->LH_PaymentTo;			$param['terms'] = $query->LH_Terms;		}				$this->load->view("sales/print/cvsales", $param);	}		function atmpb_release()	{		$this->template->load('template', 'sales/atmpb_release');	}		function atmpb_release_form()	{		$this->load->view('sales/form/atmpb_release');	}		function fetch_atmpb_release_details()	{		$data = explode(' ', $this->input->post('data'));		$ci_acctno = $data[0];				$columns = "CONCAT(CI_LName, ', ', CI_FName, ' ', CI_MName) as name";		$client = $this->master_model->fetch_client_details($columns, $ci_acctno);		$columns = 'CP_BankAcctNo as cp_bankacctno, CP_BankBranch as cp_bankbranch, CP_PensionType as cp_pensiontype';		$client_pension = $this->master_model->fetch_client_pension_details($columns, $ci_acctno);				header('Content-type: text/javascript');				die(trims("			var atmpb_release_form = $('#atmpb_release_form', parent.document).contents();						atmpb_release_form.find('input').prop('disabled', false);			atmpb_release_form.find('#ci_acctno, #ci_name').prop('readonly', true);			atmpb_release_form.find('#date, #fully_paid_date, #transaction_prior_to').val('" . date('Y-m-d') . "');			atmpb_release_form.find('#ci_acctno').val('" . $ci_acctno . "');			atmpb_release_form.find('#ci_name, #name').val('" . $client->name . "');			atmpb_release_form.find('#cp_pensiontype').val('" . $client_pension->cp_pensiontype . "');			atmpb_release_form.find('#cp_bankacctno').val('" . $client_pension->cp_bankacctno . "');			atmpb_release_form.find('#cp_bankbranch').val('" . $client_pension->cp_bankbranch . "');		"));	}		function atmpb_release_print()	{		$data['user_name'] = strtoupper($this->session->userdata('user_name'));				$result = $this->master_model->fetch_branch_code();		$result = explode(';', $result->value);		$data['branch_code'] = $result[0];				$data['x'][0] = '100px';		$data['x'][1] = '50px';		$data['y'][0] = '340px';				if($data['branch_code'] == 'SJ')		{			$data['x'][0] = '115px';			$data['x'][1] = '60px';			$data['y'][0] = '220px';		}				$this->load->view('sales/print/atmpb_release', $data);	}		function atmpb_release_process()	{		$this->sales_model->validate_atmpb_release_inputs();				$system_message = '';				if($this->form_validation->run() != FALSE)		{			$system_message = $this->sales_model->process_atmpb_release();		}				$this->atmpb_release_form($system_message);	}		/*function fetch_loans()	{		$data = $this->input->post('data');		$data = explode(' ', $data);		$ci_acctno = $data[0];				$this->db->select('CI_Name as ci_name, LH_PN as lh_pn, LH_LoanTrans as lh_loantrans');		$this->db->from('ln_hdr');		$this->db->where('CI_AcctNo', $ci_acctno);		$this->db->where('LH_LoanTrans !=', 'SPEC');		$this->db->where('LH_IsPending', 0);		$this->db->where('LH_Processed', 1);		$this->db->where('LH_Cancelled', 0);		$this->db->where('LH_Cancelled', 0);		$this->db->order_by('LH_PN', 'DESC');				$query = $this->db->get();				$options = '';		$ci_name = '';				if($query->num_rows() > 0)		{			$i = 0;						foreach($query->result() as $row)			{				$options .= '<option value="' . $row->lh_pn . '">' . $row->lh_pn . ' (' . $row->lh_loantrans . ')</option>';								if($i == 0)				{					$ci_name = $row->ci_name;				}								$i++;			}		}				die(trims("			$('#ci_acctno', parent.document).val('" . $ci_acctno . "');			$('#ci_name', parent.document).val('" . $ci_name . "');			$('#pn_no', parent.document).html('');			$('#pn_no', parent.document).append\'" . $options . "');		"));	}*/		function process_journal()	{		if($this->input->post('ci_acctno'))		{			$comm_array = array(				'ai_refno'				=> $this->input->post('ai_refno'),				'agent_type'			=> 2,				'ci_acctno'				=> $this->input->post('ci_acctno'),				'lh_pn'						=> $this->input->post('pn_no'),				'loan_date'				=> date('Y-m-d', strtotime($this->input->post('process_date'))),				'client_name'			=> $this->input->post('ci_name'),				'lh_monthlyamort' => 0,				'terms'						=> 0,				'loan_type'				=> '',				'cfp_amount'			=> str_replace(',', '', $this->input->post('payment_amount')),				'cb_amount'				=> str_replace(',', '', $this->input->post('payment_amount')),				'process_date'		=> $this->input->post('process_date'),				'processed_by'		=> $this->session->userdata('user_name'),				'status'					=> 0			);						$this->db->insert('tbl_commission', $comm_array) or die('Error: process journal function. Please contact your system administrator.');						/* Journal and entry process */		}				die(trims("			alert('Journal process for loan no. " . $this->input->post('pn_no') . " is processed.');			/*window.close();*/		"));	}		function rpcf()	{		$this->template->load('template', 'sales/rpcf');	}		function rpcf_list()	{		$data['from_date'] = $this->uri->segment(3) ? $this->uri->segment(3) : date('Y-m-d');		$data['to_date'] = $this->uri->segment(4) ? $this->uri->segment(4) : date('Y-m-d');		$data['group'] = $this->uri->segment(5) ? $this->uri->segment(5) : 'O';				$data['datas'] = $this->sales_model->fetch_rpcf($data['from_date'], $data['to_date'], $data['group']);				$this->load->view('sales/list/rpcf', $data);	}		function process_rpcf_list()	{		if($this->input->post('refund'))		{			foreach($this->input->post('refund') as $k => $refund)			{				$refundq_array = array(					'replenish_date' => date('Y-m-d', strtotime($this->input->post('replenish_date')))				);				$this->db->where('aid', $refund);				$this->db->update('refund_que', $refundq_array) or die('Error: process rpcf. Please contact your System Administrator.');			}		}				header('Content-type: text/javascript');				die(trims("			window.location.href='rpcf_list/" . date('Y-m-d', strtotime($this->input->post('from_date'))) . "/" . date('Y-m-d', strtotime($this->input->post('to_date'))) . "/" . $this->input->post('group') . "';		"));	}		function clear_rpcf_list()	{		if($this->input->post('refund'))		{			foreach($this->input->post('refund') as $k => $refund)			{				$refundq_array = array(					'replenish_date' => null				);				$this->db->where('aid', $refund);				$this->db->update('refund_que', $refundq_array) or die('Error: process rpcf. Please contact your System Administrator.');			}		}				header('Content-type: text/javascript');				die(trims("			window.location.href='rpcf_list/" . date('Y-m-d', strtotime($this->input->post('from_date'))) . "/" . date('Y-m-d', strtotime($this->input->post('to_date'))) . "/" . $this->input->post('group') . "';		"));	}		function list4refund2()	{		$param['lname'] = '';		$param['fname'] = '';		if($this->input->post('name'))		{			if(strpos($this->input->post('name'), ', ') !== FALSE)			{				$name = explode(', ', $this->input->post('name'));				{					if($name[0] !== '' && $name[1] !== '')					{						$param['lname'] = $name[0];						$param['fname'] = $name[1];					}				}			} else {				$param['lname'] = $this->input->post('name');				$param['fname'] = '';			}					$tmps = $this->db->query("				SELECT CONCAT(a.CI_LName, ', ', a.CI_FName, ' ', a.CI_MName) AS name,					a.CI_AcctNo AS clientid, b.bill_id, b.atmendbal, b.duedate				FROM client a, collection_entry b				WHERE a.CI_AcctNo = b.cid				AND a.CI_LName LIKE '%{$param['lname']}%'				AND a.CI_FName LIKE '%{$param['fname']}%'				GROUP BY a.CI_AcctNo				ORDER BY a.CI_LName,					a.CI_FName				LIMIT 100;			")->result_array();			$param['datas'] = array();			if(count($tmps))			{				foreach($tmps as $data)				{					$tmp = substr($data['bill_id'],0,strlen($data['bill_id'])-1);					$tmp = explode('.', $tmp);					$var = $this->get_param(1, $tmp[count($tmp)-1]);					$var1 = $this->get_colid( $data['clientid'] );					$tmp = explode('.', $var1['colid']);					$trid = $tmp[0];										$pensiontype = $this->database->get_c_detail( 'pentype', $data['clientid'] );										$param['datas'][] = array(						'clientid'	  => $data['clientid'],						'name'		  	=> $data['name'],						'pnno'		  	=> $var->pnno,						'bankbranch'  => $var->bankbranch,						'ptype'		  	=> $var->ptype,						'trid'		  	=> $trid,						'colid'		  	=> $var1['colid'],						'isQ'		  		=> $var1['isQ'],						'amount'	  	=> $var1['amount'],						'butal'		  	=> $this->get_butal_balance( $data['clientid'] ),						'duedate'	  	=> $data['duedate'],						'pensiontype' => $pensiontype					);				}			}		}				$this->load->view("sales/list/refund_que2", $param);	}}