<?phpclass Sales extends Controller{	public function __construct()    {        parent::__construct();        ini_set('display_errors', 'yes');        date_default_timezone_set('Asia/Manila');    }    function listdue()	{		$this->load->helper('code');		$param['datas'] = $this->db->query(			"SELECT ci_acctno,				pnno, refunddue,				ci_bankbranch,				transtype,				ci_name,				queno,				queby,				aid,				status			FROM refund_que			WHERE status='approved'			ORDER BY queno ASC;		")->result_array();		$this->load->view("sales/list/refund_due", $param);		return;	}	function refapp()	{		if($_POST['b']=='CV'):			$this->db->set('status', 'approved');			$this->db->where('aid', $_POST['a']);			$this->db->update('refund_que');			if( $this->db->_error_message()=='' )				echo"var b=a.find('td');				$(b[4]).attr('colspan',2).html('<b><small>* FOR VOUCHER *</small></b>').attr('align','center');				$(b[5]).remove();self.close();";			else echo"alert('{$this->db->_error_message()}');";		elseif($_POST['b']=='RF'):			$this->db->set('status', 'done');			$this->db->where('aid', $_POST['a']);			$this->db->update('refund_que');			if( $this->db->_error_message()=='' )				echo'a.hide("slow",function(){$(this).remove();self.close();});';			else echo"alert('{$this->db->_error_message()}');";		endif;	}        function refappcan()	{		$this->db->where('aid',$this->input->post('a'));		$this->db->delete('refund_que');		if( $this->db->_error_message()=='' )			echo'a.hide("slow",function(){$(this).remove();self.close();});';		else echo"alert('{$this->db->_error_message()}');";	}    function printform()    {    	$this->load->view('sales/form/printform');    }	function refundcancel()	{		$this->db->where('aid',$this->input->post('a'));		$this->db->delete('refund_que');		if( $this->db->_error_message()=='' )			echo'a.parent().parent().hide("slow",function(){$(this).remove()});';		else echo"alert('{$this->db->_error_message()}');";	}	function refunda()	{		$p['trid'] = $this->uri->segment(3);		$p['queno'] = $this->get_queno();		$p['data'] = $this->db->query(			"SELECT *			FROM refund_que			WHERE aid={$p['trid']};		")->row();		$this->load->view("sales/form/refund_app", $p);		return;	}	function refundq()	{		$p['trid'] = $this->uri->segment(3);		$p['ptype'] = $this->uri->segment(4);		$p['queno'] = $this->get_queno();		$p['data'] = $this->db->query(			"SELECT				b.uid as refid,				b.cid as clientcode,				b.atmbegbal,				b.amtdrawn,				b.atmendbal,				b.bill_id,				CONCAT(a.CI_LName, ', ', a.CI_FName, ' ', a.CI_MName) AS clientname			FROM collection_entry b, client a			WHERE a.CI_AcctNo = b.cid				AND b.uid={$p['trid']};		")->row();		$p['pnno'] = '';				if($p['data']->bill_id):			$tmp = substr($p['data']->bill_id,0,strlen($p['data']->bill_id)-1);			$tmp = explode('.', $tmp);			$tmp = $this->get_param(1, $tmp[count($tmp)-1]);			$p['pnno'] = $tmp->pnno;		endif;		$this->load->view("sales/form/refund_que", $p);		return;	}	function isRefundQue($var)	{		$tmps = $this->db->query(			"SELECT queno, status			FROM refund_que			WHERE colid = $var;		");		if($tmps->num_rows())		{			if($tmps->row()->status=='done')			{				$res = array(					'class'=>'done',					'value'=>''				);			}			elseif($tmps->row()->status=='approved')			{				$res = array(					'class'=>'forvoucher',					'value'=>'<b><small>* FOR VOUCHER *</small></b>'				);			}			elseif($tmps->row()->status=='draft')			{				$res = array(					'class'=>'que',					'value'=>$tmps->row()->queno				);						}			return $res;		}	}		function list4refund()	{		$this->load->helper('code');		$tmps = $this->db->query(			"SELECT a.AcctNo AS clientid,				CONCAT(a.CI_LName, ', ', a.CI_FName, ' ', a.CI_MName) AS name,				a.CI_AcctNo as acctno,				b.bill_id, b.atmendbal, b.uid			FROM client a, collection_entry b			WHERE a.CI_AcctNo = b.cid			ORDER BY a.CI_LName,				a.CI_FName;		")->result_array();		foreach($tmps as $data)		{			$tmp = substr($data['bill_id'],0,strlen($data['bill_id'])-1);			$tmp = explode('.', $tmp);			$var = $this->get_param(1, $tmp[count($tmp)-1]);			$isq = $this->isRefundQue( $data['uid'] );			$param['datas'][] = array(				'clientid' 	=> $data['clientid'],				'name'		=> $data['name'],				'pnno'		=> $var->pnno,				'bankbranch'=> $var->bankbranch,				'ptype'		=> $var->ptype,				'colid'		=> $data['uid'],				'amount'	=> $data['atmendbal'],				'isQ'		=> (isset($isq)?$isq:FALSE)			);		}		$this->load->view("sales/list/refund_que", $param);		return;	}	function list4app()	{		$this->load->helper('code');		$param['datas'] = $this->db->query(			"SELECT ci_acctno,				pnno, refunddue,				ci_bankbranch,				transtype,				ci_name,				queno,				queby,				aid,				status			FROM refund_que			WHERE status IN ('draft','approved')			ORDER BY queno ASC;		")->result_array();		$this->load->view("sales/list/refund_app", $param);		return;	}	function get_queno()	{		$t = $this->db->query(			"SELECT queno			FROM refund_que			WHERE status IN ('draft')			ORDER BY queno DESC			LIMIT 1;		");		if($t->num_rows())		{			$queno = $t->row()->queno+1;			unset($t);			return $queno;		}else		{			unset($t);			return 1;		}	}	function get_param($int, $value)	{		switch($int)		{			// pnno and bankbranch			case 1:				$t = $this->db->query(					"SELECT bankbranch,						LH_PN as pnno,						pentype as ptype					FROM nhgt_bills.header					WHERE bill_id=$value				");				if($t->num_rows())return $t->row();			break;		}	}////////////// KENNETH FUNCTIONS ////////////////	function view_loandata()	{		$this->load->helper('code');				/* Get client data */		$de = explode(' ', $this->input->post('data'));		$this->db->where('AcctNo', $de[0]);		$d = $this->db->get('client')->row();		$name = $d->CI_LName.', '.$d->CI_FName.' '.$d->CI_MName;		/* Get client_pension data */		$acctno = $d->CI_AcctNo;		$this->db->where('CI_AcctNo', $acctno);		$cp = $this->db->get('client_pension')->row();		/* Get CoMaker fullname and ref no */		$cmname = '';		if($d->CI_CoMaker!='')		{			$cm = $this->db->query("SELECT CONCAT(CM_LName, ', ', CM_FName, ' ', CM_MName) AS cmname, CM_RefNo FROM comaker WHERE CM_RefNo='{$d->CI_CoMaker}';")->result_array();			foreach($cm as $cm)			{				$cmname = $cm['cmname'];				$cmrefno = $cm['CM_RefNo'];			}		}		/* Get Agent1 fullname and ref no */		$a1name = '';		if($d->CI_Agent1!='')		{			$ai = $this->db->query("SELECT CONCAT(AI_LName, ', ', AI_FName, ' ', AI_MName) AS ainame, AI_RefNo FROM agent WHERE AI_RefNo='{$d->CI_Agent1}';")->result_array();			foreach($ai as $ai)			{				$a1name = $ai['ainame'];				$a1refno = $ai['AI_RefNo'];			}		}		/* Get active loans */		$pn = '<option value=""></option>';		$type = '<option value=""></option>';		$query = $this->db->query("			SELECT LH_PN			FROM ln_hdr			WHERE CI_AcctNo='".$acctno."'			AND LH_LoanTrans!='SPEC'			AND LH_isTop='1'			AND LH_isPending='0'			AND LH_Processed='1';		");		if($query->num_rows()>=1)		{			foreach($query->result_array() as $row)			{				$pn .= '<option value="'.$row['LH_PN'].'">'.$row['LH_PN'].'</option>';			}		} else {			$type .= '<option value="NEW CLIENT">NEW CLIENT</option>';		}		/* Client list click function */		$cpamt = number_format($cp->CP_Amount, 2);		$n = (int)$cp->CP_Amount;		$p = substr_replace($n, '00', -2);		$amt = number_format($p, 2);		die(trims("			var a=$('#lf',parent.document).contents();						a.find('#preview-btn').attr('disabled', true);						var b=a.find('#loanTab');						b.find('#c1').val('');			b.find('#a2').attr('disabled', false);						b.find('#a0').val('$cp->CP_BankAcctNo');			b.find('#a1').val('$cpamt');						b.find('#a2').empty();			b.find('#a2').append('$pn');			b.find('#a2').css('background-color', '#ffff99');			b.find('#a4').val('0.00');			b.find('#a6').val('0.00');			b.find('#a8').val('0.00');			b.find('#a9').val('$amt');			b.find('#a11').val('');						b.find('#a12').attr('disabled', false);			b.find('#a12').empty();			b.find('#a12').html('$type');			b.find('#a12').css('background-color', 'ffff99');						b.find('#a13').empty();			b.find('#a13').attr('disabled', true);						b.find('#a14').attr('disabled', true);			b.find('#a14').css('background-color', 'fff');						b.find('#a15').empty();			b.find('#a15').attr('disabled', true);						b.find('#a16').val('1');			b.find('#a16').attr('disabled', true);			b.find('#a16').css('background-color', 'fff');						b.find('#a19').empty();			b.find('#a19').attr('disabled', true);			b.find('#a19').css('background-color', 'fff');						b.find('#a21').val('');			b.find('#a21').attr('disabled', true);			b.find('#a21').css('background-color', 'fff');						b.find('#a33').val('0.00');			b.find('#a33').attr('readonly', true);			b.find('#a33').attr('background-color', 'fff');						b.find('#a35').val('0.00');			b.find('#a35').attr('disabled', true);			b.find('#a35').css('background-color', 'fff');			b.find('#a36').val('0.00');			b.find('#a37').val('');			b.find('#a37').val('$d->CI_AcctNo');			b.find('#a38').val('$name');			b.find('#a39').val('$cmname');			b.find('#a40').val('$d->CI_Add1');			b.find('#a41').val('$a1name');			b.find('#a42').val('$d->CI_Agent1_Rate');			b.find('#a43').val('$d->CI_CedulaNo');		"));		return;	}		function view_loandetails()	{		$this->load->helper('code');		$de = explode(' ', $this->input->post('data'));		$acctno = $this->input->post('acctno');				$this->db->where('LH_PN', $de[0]);		$this->db->where('CI_AcctNo', $acctno);		$d = $this->db->get('ln_hdr')->row();				/*$d = $this->db->query(			"SELECT * FROM ln_hdr WHERE LH_PN='".$de[0]."' AND CI_AcctNo='".$acctno."' LIMIT 1 DESC;		")->row();*/				switch($d->LH_LoanTrans)		{			case 'NEW':				$loantrans = 'NEW CLIENT';				break;			case 'REN':				$loantrans = 'RENEWAL';				break;			case 'ADD':				$loantrans = 'ADDITIONAL';				break;			case 'EXT':				$loantrans = 'EXTENSION';				break;		}		/* Get Loan ref no */		$ref = '';		if($d->LH_Reference!='')		{			$ref = ': '.$d->LH_Reference;		}		/* Get Agent1 fullname and ref no */		$a1name = '';		if($d->LH_Agent1!='')		{			$ai = $this->db->query("SELECT CONCAT(AI_LName, ', ', AI_FName, ' ', AI_MName) AS ainame, AI_RefNo FROM agent WHERE AI_RefNo='{$d->LH_Agent1}';")->result_array();			foreach($ai as $ai)			{				$a1name = $ai['ainame'];				$a1refno = $ai['AI_RefNo'];			}		}				$ldate = date('M d Y' ,strtotime($d->LH_LoanDate));		$sdate = date('M Y' ,strtotime($d->LH_StartDate));		$edate = date('M Y' ,strtotime($d->LH_EndDate));				$amt = number_format($d->LH_LoanAmt, 2);		$principal = number_format($d->LH_Principal, 2);		$monthly = number_format($d->LH_MonthlyAmort, 2);		$rate = number_format($d->LH_Rate, 2);		$intamt = number_format($d->LH_InterestAmt, 2);		$oc = number_format($d->LH_CollFeeRate, 2);		$ocamt = number_format($d->LH_CollFee, 2);		$procamt = number_format($d->LH_ProcFee, 2);		$no = number_format($d->LH_Notarial, 2);		$ob = number_format($d->LH_OBC, 2);		$obspec = number_format($d->LH_OBC_SPEC, 2);		$payto = number_format($d->LH_PaymentTo, 2);		$advpay = number_format($d->LH_AdvPayment, 2);		$netproc = number_format($d->LH_NetProceeds, 2);				$atty = $this->db->query("SELECT code, value FROM parameter WHERE code='ATTY01' OR code='ATTY02' OR code='ATTY03';")->result_array();		$i = 0;		foreach($atty as $atty)		{			$a = explode(';', $atty['value']);			$b[$i] = $a[0];			$i++;		}				die(trims("			var a=$('#lp',parent.document).contents();						a.find('#print-btn').attr('disabled', false);						var b=a.find('#loanTab');						b.find('#b1').val('$de[0]');			b.find('#c1').val('$acctno');						b.find('#a1').val('$d->LH_BankBranch');			b.find('#a2').val('$loantrans$ref');			b.find('#a3').val('$d->LH_WithdrawalDate');			b.find('#a4').val('$loantrans');			b.find('#a5').val('$ldate');			b.find('#a6').val('$d->LH_PayOption');			b.find('#a7').val('$ldate');			b.find('#a8').val('$d->LH_Computation');			b.find('#a9').val('$sdate - $edate');			b.find('#a10').val('$d->LH_Terms');			b.find('#a11').val('$amt');			b.find('#a12').val('$principal');			b.find('#a13').val('$monthly');			b.find('#a14').val('$rate');			b.find('#a15').val('$intamt');			b.find('#a16').val('$oc');			b.find('#a17').val('$ocamt');			b.find('#a18').val('$procamt');			b.find('#a19').val('$no');			b.find('#a31').val('$ob');			b.find('#a32').val('$obspec');			b.find('#a33').val('$payto');			b.find('#a34').val('$advpay');			b.find('#a35').val('$netproc');			b.find('#a36').val('$a1name');			b.find('#a37').val('');			b.find('#a38').val('$b[0]');			b.find('#a40').val('$b[1]');			b.find('#a41').val('$d->LH_Address');			b.find('#a42').val('$b[2]');			b.find('#a43').val('$d->LH_CedulaNo');		"));		return;	}		function view_pendingloans()	{		$acctno = $this->input->post('acctno');		$query = $this->db->query('SELECT * FROM ln_hdr WHERE CI_AcctNo="'.$acctno.'" AND LH_LoanTrans!="SPEC" AND LH_IsPending="1" AND LH_Processed="1" ORDER BY LH_PN ASC;');		$rows = $query->num_rows();		if($rows>0)		{			echo $rows.';';			$i = 0;			foreach($query->result_array() as $row)			{				$pn[$i] = $row['LH_PN'];				$amt[$i] =$row['LH_NetProceeds'];				switch($row['LH_LoanTrans'])				{					case 'NEW':						$re[$i] = 'NEW CLIENT';						break;					case 'REN':						$re[$i] = 'RENEWAL';						break;					case 'ADD':						$re[$i] = 'ADDITIONAL';						break;					case 'EXT':						$re[$i] = 'EXTENSION';						break;				}				$i++;			}						for($a=0;$a<$rows;$a++)			{				echo $pn[$a].';';			}			for($a=0;$a<$rows;$a++)			{				echo $amt[$a].';';			}			for($a=0;$a<$rows;$a++)			{				echo $re[$a].';';			}		}				$pnno = $this->input->post('pnno');		$query = $this->db->query('SELECT * FROM ln_hdr WHERE CI_AcctNo="'.$acctno.'" AND LH_PN="'.$pnno.'" AND LH_LoanTrans!="SPEC" AND LH_IsPending="1" AND LH_Processed="1";')->row();		echo $query->CI_Name.';'.$query->LH_LoanDate.';'.$query->CI_AcctNo.';';		return;	}	function getRefundCV() {		$acctno = $this->input->post('acctno');		$pnno = $this->input->post('pnno');		$refundQue = $this->db->query("			SELECT *			FROM refund_que			WHERE ci_acctno='".$acctno."'			AND pnno='".$pnno."'			AND cvrf='CV'			AND status='approved'		")->row();		echo $refundQue->ci_name.';';		echo $refundQue->transdate.';';		//$checkAmt = $refundQue->atmadvance + $refundQue->advrefund + $refundQue->refunddue;		//echo $checkAmt.';';		}		return;	}		function get_loantypes()	{		if($_REQUEST['pnno']!='')		{			echo '<option value=""></option>';			$acctno = $_REQUEST['acctno'];			$pnno = $_REQUEST['pnno'];						/* Condition to append RENEWAL OR EXTENSION */			$query = $this->db->query('SELECT LH_MonthlyAmort, LH_NetProceeds, LH_Balance, LH_LoanTrans, LH_Terms, LH_LoanDate, LH_StartDate, LH_EndDate FROM ln_hdr WHERE CI_AcctNo="'.$acctno.'" AND LH_PN="'.$pnno.'";');			foreach($query->result() as $row)			{				$terms = $row->LH_Terms;				if($terms='12')				{					$i='5';				} elseif($terms='9') {					$i='4';				} elseif($terms='6') {				$i='2';				}				$date1 = date('Y-m-01', strtotime($row->LH_LoanDate));				$date2 = strtotime($date1);				$termdate = date('Y-m-01', strtotime('+'.$i.' month', $date2));								$monthlyamort = $row->LH_MonthlyAmort;				$netproceeds = $row->LH_NetProceeds;				$balance = $row->LH_Balance;				$start = date('M Y', strtotime($row->LH_StartDate));				$end = date('M Y', strtotime($row->LH_EndDate));			}			$date3 = date('Y-m-01');			if($date3 > $termdate)			{				echo '<option value="RENEWAL">RENEWAL</option>';			} else {				echo '<option value="EXTENSION">EXTENSION</option>';;			}			/* Condition to append ADDITIONAL */			$totalma = 0;			$query = $this->db->query('SELECT LH_MonthlyAmort, LH_Balance, LH_LoanTrans, LH_Terms, LH_LoanDate, LH_StartDate, LH_EndDate FROM ln_hdr WHERE CI_AcctNo="'.$acctno.'" AND LH_LoanTrans!="EXT" AND LH_IsTop="1";');			foreach($query->result_array() as $row)			{				$totalma += $row['LH_MonthlyAmort'];			}			$query = $this->db->query('SELECT CP_Amount FROM client_pension WHERE CI_AcctNo="'.$acctno.'";');			foreach($query->result() as $row)			{				$n = (int)$row->CP_Amount;				$amt = substr_replace($n, '00', -2);				$ren = $amt - $totalma;				if($ren >= 100)				{					echo '<option value="ADDITIONAL">ADDITIONAL</option>';				}			}			echo ';'.$monthlyamort.';'.$netproceeds.';'.$balance.';'.$start.';'.$end;		}	}		function get_terms()	{		$loantype = $_REQUEST['loantype']; 		if($loantype)		{			if($loantype=='NEW CLIENT'||$loantype=='RENEWAL'||$loantype=='ADDITIONAL')			{				echo '<option value="6">6</option><option value="9">9</option><option value="12">12</option>';			} elseif($loantype=='EXTENSION') {				echo '<option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option>';			}		}	}		function get_loanableamount()	{		$availableamt = str_replace(',','',$_REQUEST['availableamt']);		$loantype = $_REQUEST['loantype'];		$acctno = $_REQUEST['acctno'];		if($loantype=='ADDITIONAL')		{			$totalma = 0;			$query = $this->db->query('SELECT LH_MonthlyAmort, LH_Balance, LH_LoanTrans, LH_Terms, LH_LoanDate, LH_StartDate, LH_EndDate FROM ln_hdr WHERE CI_AcctNo="'.$acctno.'" AND LH_LoanTrans!="EXT" AND LH_IsTop="1";');			foreach($query->result_array() as $row)			{				$totalma += $row['LH_MonthlyAmort'];			}			$additionalamt = $availableamt - $totalma;			if($additionalamt >= 100)			{				echo number_format($additionalamt, 2);			} else {				echo '0.00';			}		} else {			echo number_format($availableamt, 2);		}	}		function loancomputation()	{		$loantype = $_REQUEST['loantype'];		if($loantype!='')		{			$acctno = $_REQUEST['acctno'];			$amt = str_replace(',','',$_REQUEST['loanableamt']);						$terms = $_REQUEST['terms'];			$intrate = $_REQUEST['intrate'];			$processfee = $_REQUEST['processfee'];			$ocrate = $_REQUEST['ocrate'];			$ob = $_REQUEST['ob'];			$advpay = $_REQUEST['advpay'];						/* Check for cutoff */			$q = $this->db->query("				SELECT code, value				FROM parameter				WHERE code='CutOff';			")->row();			$cd = $q->value;			$cutDay = (int)$cd;			$loanDay = date('d', strtotime($_REQUEST['ldate']));			if($loanDay>=$cutDay&&$loantype!='EXTENSION')			{				$date = strtotime(date('Y-m-01'));				$f = date('F Y',strtotime('+2 month', $date));				$cutterms = $terms + 1;				$g = date('F Y',strtotime('+'.$cutterms.' month', $date));			} else {				$date = strtotime(date('Y-m-01'));				$f = date('F Y',strtotime('+1 month', $date));				$g = date('F Y',strtotime('+'.$terms.' month', $date));			}						/* Computation */			$principal = $amt * $terms;			if($loantype=='EXTENSION')			{				$intamt = $intrate * $principal;			} else {				$intamt = ($intrate * $terms) * $principal;			}			$ocamt = $ocrate * $principal;			$netproceeds = $principal - $intamt - $ocamt - $processfee - $ob - $advpay;			$a = number_format($principal, 2);			$b = number_format($intamt, 2);			$c = number_format($ocamt, 2);			$d = number_format($netproceeds, 2);						/* Generte PN No. */			$query = $this->db->query('SELECT * FROM ln_hdr WHERE CI_AcctNo="'.$acctno.'" AND LH_LoanTrans!="SPEC";');			$i = 0;			$i = $query->num_rows() + 1;			$count = str_pad($i, 3, '0', STR_PAD_LEFT);			$ldate = $_REQUEST['ldate'];			$e = 'ALB-'.$ldate.'-'.$count;						echo $a.';'.$b.';'.$c.';'.$d.';'.$e.';'.$f.';'.$g;		} else {			echo ';;;;;';		}	}		function get_loandata()	{		$clientid = $_REQUEST['clientid'];		if($clientid!='')		{			$query = $this->db->query("				SELECT a.LH_PN, a.CI_AcctNo 				FROM ln_hdr a, client b 				WHERE a.CI_AcctNo = b.CI_AcctNo				AND b.AcctNo='".$clientid."'				AND LH_LoanTrans!='SPEC'				ORDER BY a.LH_PN ASC				LIMIT 1;			")->row();			echo $query->CI_AcctNo.';'.$query->LH_PN;		}	}		function index()	{		$this->template->set('page_title', 'Sales');		$this->template->load('template', 'sales/index');		return;	}	function processloan()	{		$this->template->load('template', 'sales/processloan');		return;	}		function loanprocessing()	{		$this->template->load('template', 'sales/loanprocessing');		return;	}		function checkvoucher()	{		$this->template->load('template', 'sales/checkvoucher');		return;	}		function clientledger()	{		$this->template->load('template', 'sales/clientledger');		return;	}	function refundque()	{		$this->template->load('template', 'sales/refund_que');		return;	}	function refunddue()	{		$this->template->load('template', 'sales/refund_due');		return;	}	function refundapp()	{		$this->template->load('template', 'sales/refund_app');		return;	}		function clientlist()	{		$param['datas'] = $this->db->query(			"SELECT AcctNo AS clientid,				CONCAT(CI_LName, ', ', CI_FName, ' ', CI_MName) AS name,				CI_AcctNo as acctno			FROM client			ORDER BY CI_LName,				CI_FName;		")->result_array();				$this->load->view("sales/list/client", $param);		return;	}		function loanlist()	{		$param['datas'] = $this->db->query(			"SELECT *			FROM ln_hdr			WHERE LH_IsPending='1' AND LH_Processed='0'			AND LH_LoanTrans!='SPEC'			ORDER BY LH_LoanDate ASC;		")->result_array();				$this->load->view("sales/list/loan", $param);		return;	}		function cvlist()	{		$param['datas'] = array();				$q = $this->db->query(			"SELECT *			FROM ln_hdr			WHERE LH_IsPending='1' AND LH_Processed='1'			ORDER BY LH_LoanDate ASC;		")->result_array();		if(count($q)):			foreach ($q as $v)			{				$param['datas'][] = array(					'CI_AcctNo' => $v['CI_AcctNo'],					'LH_PN' => $v['LH_PN'],					'CI_Name' => $v['CI_Name'],					'type' => 'sales'				);				}		endif;		$q = $this->db->query(			"SELECT ci_acctno,				pnno,				ci_name			FROM refund_que			WHERE status='approved'			AND cvrf='CV';		")->result_array();				if(count($q)):			foreach ($q as $v)			{				$param['datas'][] = array(					'CI_AcctNo' => $v['ci_acctno'],					'LH_PN' => $v['pnno'],					'CI_Name' => $v['ci_name'],					'type' => 'refund'				);				}		endif;				$this->load->view("sales/list/cv", $param);		return;	}		function loanform()	{		$param['datas'] = $this->db->query("			SELECT code,				value			FROM parameter			WHERE code='FeeRate'			OR code='ProcFee'			OR code='Rate'			ORDER BY code ASC;		")->result_array();		$this->load->view("sales/form/loanform", $param);		return;	}		function loanprocessform()	{		$param['datas'] = $this->db->query("			SELECT code,				value			FROM parameter			WHERE code='APPR'			OR code='CHECK'			OR code='PREP'			ORDER BY code ASC;		")->result_array();		$this->load->view("sales/form/loanprocess");		return;	}		function checkvoucherform()	{		$query = $this->db->query("SELECT code, value FROM parameter WHERE code='CVNO' LIMIT 1;")->row();		$param['cvno'] = $query->value;				$param['banks'] = $this->db->query("			SELECT code,				value			FROM parameter			WHERE code='BANK'			ORDER BY value ASC;		")->result_array();						$param['datas'] = $this->db->query("			SELECT code,				value			FROM parameter			WHERE code='APPR'			OR code='CHECK'			OR code='PREP'			ORDER BY code ASC;		")->result_array();		$this->load->view("sales/form/checkvoucherform", $param);		return;	}		function referenceloans()	{		$param['acctno'] = $_REQUEST['acctno'];		$param['refpn'] = $_REQUEST['refpn'];		$param['datas'] = $this->db->query("			SELECT LH_PN,				LH_MonthlyAmort,				LH_Balance,				LH_LoanTrans,				LH_Terms,				LH_LoanDate,				LH_Principal			FROM ln_hdr			WHERE CI_AcctNo='".$param['acctno']."'			AND LH_IsTop='1'			AND LH_IsPending='0'			AND LH_Processed='1'			AND LH_LoanTrans!='SPEC';		")->result_array();				$this->load->view("sales/form/referenceloans", $param);		return;	}		function computation()	{		$param['acctno'] = $_REQUEST['acctno'];		$param['type'] = $_REQUEST['type'];		$param['name'] = $_REQUEST['name'];		$param['monthly'] = str_replace(',','',$_REQUEST['monthly']);		$param['terms'] = $_REQUEST['terms'];		$param['pnamt'] = $_REQUEST['terms'] * $param['monthly'];		if($_REQUEST['type']=='EXTENSION')		{			$param['interest'] = $_REQUEST['intrate'];		} else {			$param['interest'] = 1 - ($_REQUEST['terms'] * $_REQUEST['intrate']);		}		$param['minusint'] = $param['pnamt'] * $param['interest'];		$param['processfee'] = $_REQUEST['processfee'];		$param['minusfee'] = $param['minusint'] - $param['processfee'];		$param['othercharges'] = $param['pnamt'] * $_REQUEST['other'];		$param['minuscharges'] = $param['minusfee'] - $param['othercharges'];		$param['balance'] = str_replace(',','',$_REQUEST['ob']);		$param['minusbalance'] = $param['minuscharges'] - $param['balance'];		$param['advancepay'] = str_replace(',','',$_REQUEST['advance']);		$param['pn'] = $_REQUEST['pn'];		$param['net'] = $param['minusbalance'] - $param['advancepay'];		$this->load->model('testmain');		$result_client = $this->testmain->get_data('client','CI_AcctNo',$param['acctno']);		$param['address'] = $result_client->CI_Add1;		$result_pension = $this->testmain->get_data('client_pension','CI_AcctNo',$param['acctno']);		$param['pension'] = $result_pension->CP_Amount;		$date = explode(';', $_REQUEST['duration']);		$param['start'] = $date[0];		$param['end'] = $date[1];		$this->load->view("sales/print/computation", $param);		return;	}		function submitloan()	{		$this->load->helper('code');				$q = $this->db->query("SELECT code, value FROM parameter WHERE code='BRANCH';")->row();		$branch = explode(';', $q->value);		$bcode = $branch[0];				$cp = $this->db->query("SELECT CP_BankAcctNo, CP_BankBranch FROM client_pension WHERE CI_AcctNo='".$_POST['a37']."';")->row();		$bankacct = $cp->CP_BankAcctNo;		$bank = $cp->CP_BankBranch;				$ci = $this->db->query("SELECT CI_CoMaker, CI_Agent1, CI_Agent1_Rate FROM client WHERE CI_AcctNo='".$_POST['a37']."';")->row();		$cmref = $ci->CI_CoMaker;		$a1 = $ci->CI_Agent1;		$a1rate = $ci->CI_Agent1_Rate;				$cm = $this->db->query("SELECT CM_RefNo, CM_Add1 FROM comaker WHERE CM_RefNo='".$cmref."';")->row();		$cmadd1 = $cm->CM_Add1;				$atty = $this->db->query("SELECT code, value FROM parameter WHERE code='ATTY01' OR code='ATTY02' OR code='ATTY03';")->result_array();		$i = 0;		foreach($atty as $atty)		{			$a = explode(';', $atty['value']);			$b[$i] = $a[1];			$i++;		}				$obc = str_replace(',','',$_POST['a31']);		$payment = str_replace(',','',$_POST['a33']);		$advpay = str_replace(',','',$_POST['a35']);		$loantype = substr($_POST['a12'], 0, 3);				$start = date('Y-m-01', strtotime($_POST['a20']));		$end = date('Y-m-01', strtotime($_POST['a22']));		/* Generate SysId*/		$this->load->model('testmain');		$result = $this->testmain->gen_sysid('ln_hdr', 'SysId');		$nextAcctNo = $result->SysId + 1;		$newLoan = array(			'SysID' => $nextAcctNo,			'CI_AcctNo' => $_POST['a37'],			'LH_BranchCode' => $bcode,			'acctno' => '',			'CI_Name' => $_POST['a38'],			'LH_BankBranch' => $bank,			'LH_BankAcctNo' => $bankacct,			'LH_BankAmt' => str_replace(',','',$_POST['a1']),			'LH_PN' => $_POST['c0'],			'LH_Reference' => $_POST['c1'],			'LH_Ref_OB' => $_POST['c2'],			'LH_LoanAmt' => str_replace(',','',$_POST['a24']),			'LH_MonthlyAmort' => str_replace(',','',$_POST['a24']),			'LH_Principal' => str_replace(',','',$_POST['a23']),			'LH_NetProceeds' => str_replace(',','',$_POST['a36']),			'LH_InterestAmt' => str_replace(',','',$_POST['a26']),			'LH_Rate' => $_POST['a25'],			'LH_Balance' => str_replace(',','',$_POST['a23']),			'LH_OBC' => ($obc==''?'0':$obc),			'LH_OBC_SPEC' => '0',			'LH_Refund' => '0',			'LH_Payment' => ($payment==''?'0.00':$payment),			'LH_Renew' => '0',			'LH_ProcFee' => ($_POST['a29']==''?'0.00':$_POST['a29']),			'LH_CollFee' => ($_POST['a28']==''?'0.00':$_POST['a28']),			'LH_CollFeeRate' => ($_POST['a27']==''?'0.00':$_POST['a27']),			'LH_Notarial' => ($_POST['a30']==''?'0':$_POST['a30']),			'LH_PaymentTo_Ref' => '',			'LH_PaymentTo' => ($_POST['a33']==''?'0.00':$_POST['a33']),			'LH_AdvPayment' => ($advpay==''?'0.00':$advpay),			'LH_LoanType' => 'PEN',			'LH_LoanTrans' => $loantype,			'LH_Terms' => $_POST['a19'],			'LH_LoanDate' => date('Y-m-d', strtotime($_POST['a14'])),			'LH_Balance' => str_replace(',','',$_POST['a23']),			'LH_StartDate' => $start,			'LH_EndDate' => $end,			'LH_PayOption' => $_POST['a13'],			'LH_PaymentType' => 'ATM',			'LH_Computation' => $_POST['a15'],			'LH_WithdrawalDate' => $_POST['a16'],			'LH_CoMaker' => $cmref, 			'LH_Address' => $cmadd1,			'LH_Agent1' => $a1,			'LH_Atty1' => $b[0],			'LH_Atty2' => $b[1],			'LH_Atty3' => $b[2],			'LH_IsTop' => '1',			'LH_IsPending' => '1',			'LH_IncludeToList' => '1',			'LH_ProcessedDate' => date('Y-m-d', strtotime($_POST['a14'])),			'LH_BranchCode_Proc' => $bcode,			'LH_CancelledBy' => '',			'LH_CancelledDate' => NULL,			'GL_Account' => '',			'LH_Posted_BySales' => '0',			'LH_PostedBy_BySales' => '0',			'LH_Posted_ByAcct' => '0',			'LH_IsAdded' => '0',			'LH_IsModified' => '0'		);		$this->db->insert('ln_hdr', $newLoan) or die($this->db->_error_message());		die(trims("			<script>				window.parent.document.location.href='loanprocessing';			</script>		"));		return;	}		function updateloanprocess()	{		$this->load->helper('code');				$param['acctno'] = $_POST['c1'];		$param['pnno'] = $_POST['b1'];				$processLoan = array(			'LH_Processed' => '1'		);		/* Loan detail is processed and process of  Check Voucher is pending */		$this->db->where('CI_AcctNo', $_POST['c1']);		$this->db->where('LH_PN', $_POST['b1']);		$this->db->update('ln_hdr', $processLoan) or die(mysql_error());		die(trims("			<script>				window.parent.document.location.href='checkvoucher';			</script>		"));		return;	}		function submitcheckvoucher()	{		date_default_timezone_set('Asia/Manila');		$this->load->helper('code');		$this->load->model('rsm');				$this->db->select("cvdtlno");		$this->db->order_by('cvdtlno', 'DESC');		$this->db->limit(1);		$query = $this->db->get("tbl_cvheadr");		if($query)		{			if($query->num_rows() == 0)			{				$nextCvdtl = 1;			} else			{				$q = $query->row();				$nextCvdtl = $q->cvdtlno + 1;			}		}				/* For multiple transaction */		$this->db->trans_start();				$this->db->select("value");		$this->db->where("code", 'BRANCH');		$param = $this->db->get("parameter")->row();		$branch = $param->value;		$branch = explode(';', $branch);				$date = $_POST['a2'];		$pnno = $_POST['b1'];				$newCV = array(			'cvdtlno'  => $nextCvdtl,			'bcode'	   => $branch[0],			'cvno'	   => $_POST['a1'], 			'payee'	   => $_POST['b0'],			'ckno'	   => $_POST['a3'],			'cvdate'   => date('Y-m-d', strtotime($date)),			'ckamount' => $_POST['a4'],			'pnno'	   => $pnno,			'cvtype'   => 'S', // S for NET PROCEEDS			'bankid'   => $_POST['a7'],			'remarks'  => $_POST['a8']		);		$this->db->insert('tbl_cvheadr', $newCV) or die( $this->db->_error_message() );				/* Update CvNo of parameter */		$query = $this->db->query("SELECT value FROM parameter WHERE code='CVNO' LIMIT 1")->row();		$nextCvNo = trim($query->value);		$nextCvNo++;		$this->db->set('value', $nextCvNo);		$this->db->where('code', 'CVNO');		$this->db->update('parameter') or die( $this->db->_error_message() );				/* Update LH_IsPending of loan, Update LH_IsTop of ref loans */		$acctno = $_POST['b0'];		$pn = explode(';', $_POST['b1']);		for($i=0;$i<count($pn)-1;$i++)		{			$this->db->select("LH_PN, LH_LoanTrans, LH_Reference, LH_BankAcctNo, LH_Ref_OB, LH_OBC");			$this->db->where("CI_AcctNo", $acctno);			$this->db->where("LH_PN", $pn[$i]);			$parent = $this->db->get("ln_hdr")->row();			/* Close reference loans of Renewal Loans */			$trans = $parent->LH_LoanTrans;			if($trans=='REN')			{				$LH_Remarks = 'RENEWAL CLOSED';				$refpn = explode(';', $parent->LH_Reference);				$refob = explode(';', $parent->LH_Ref_OB);				$numref = count($refpn)-2;				for($f=0;$f<=$numref;$f++)				{										$this->db->select("LH_Balance, LH_LoanTrans");					$this->db->where('CI_AcctNo', $acctno);					$this->db->where('LH_PN', $refpn[$f]);					$child = $this->db->get("ln_hdr")->row();										$LH_Balance = $child->LH_Balance - $refob[$i];										$this->db->set("LH_Balance", $LH_Balance);					$this->db->set("LH_IsTop", 0);					$this->db->where('CI_AcctNo', $acctno);					$this->db->where('LH_PN', $refpn[$f]);					$this->db->update("ln_hdr") or die( $this->db->_error_message() );										$this->db->select("ID");					$this->db->where('CI_AcctNo', $acctno);					$this->db->where('LH_PN', $refpn[$f]);					$this->db->order_by('ID', 'DESC');					$this->db->limit(1);					$id = $this->db->get("ln_ldgr")->row();										$nextId = trim($id->ID);					$nextId++;										$newPost = array(						'ID'					  => $nextId,						'CI_AcctNo'				  => $acctno,						'LH_BranchCode_Processed' => $branch[0],						'LH_BankAcctNo_Branch'	  => $parent->LH_BankAcctNo,						'LH_BankAcctNo'			  => $parent->LH_BankAcctNo,						'LH_BankCredit'			  => $_POST['a7'],						'LH_PN'					  => $refpn[$f],						'LH_LoanType'			  => $child->LH_LoanTrans,						'RFW_NO'				  => 'CV#'.$_POST['a1'].'&CK#'.$_POST['a3'],						'LL_Rebates'			  => 0,						'LL_InterestAmt'		  => 0,						'LL_AmountCheck'		  => 0,						'LL_AmountCash'			  => 0,						'LL_AmountCash_Payment'	  => $refob[$f],						'LL_ShortPayment'		  => 0,						'LL_Refund'				  => 0,						'LL_Remarks'			  => $LH_Remarks,						'LL_PaymentDate'		  => date('Y-m-d H:i:s', strtotime($date)),						'LL_Processed'			  => 1,						'LL_ProcessedDate'		  => date('Y-m-d H:i:s', strtotime($date)),						'LL_ProcessedBy'		  => $this->session->userdata('user_name'),						'LL_PaymentType'		  => 'ATM', // ATM / PB						'LL_IsPayment'			  => 1,						'LL_IsRFW'				  => 1,						'LL_IsRefund'			  => 0,						'LL_CM'					  => 0,						'LL_IsBounceCheck'		  => 0,						'LL_IsBounceCheck'		  => 0,						'LL_IsUncollected'		  => 0,						'LL_IsShortPayment'		  => 0,						'LL_IsDeleted'			  => 0,						'LL_Posted_BySales'		  => 0,						'LL_Posted_ByAcct'		  => 0,						'LL_IsAdded'			  => 1,						'LL_IsModified'			  => 0					);					$this->db->insert('ln_ldgr', $newPost) or die( $this->db->_error_message() );									}			}						$this->db->set("LH_IsTop", 1);			$this->db->set("LH_IsPending", 0);			$this->db->where("CI_AcctNo", $acctno);			$this->db->where("LH_PN", $pn[$i]);			$this->db->update('ln_hdr') or die( $this->db->_error_message() );			$linfo = $this->rsm->get_pn_details( $acctno, $pn[$i] );			$lastentryid = $this->rsm->get_last_entryid();			$dr = 0; $cr = 0;			if( $linfo->num_rows() ):				$linfo = $linfo->row();				$now = date('Y-m-d H:i:s');				$entry = array(					'entry_id'  => $lastentryid,					'ledger_id' => 4,					// Notes receivable					'dc'        => 'D',					'amount'    => $linfo->LH_Principal // Principal				);				$this->db->insert("entry_items", $entry);				$dr+=$linfo->LH_Principal;				if( $linfo->LH_ProcFee ):					$entry = array(						'entry_id'  => $lastentryid,						'ledger_id' => 32,				//Processing fee						'dc'        => 'C',						'amount'    => $linfo->LH_ProcFee					);					$this->db->insert("entry_items", $entry);					$cr+=$linfo->LH_ProcFee;				endif;				if( $linfo->LH_InterestAmt ):					$entry = array(						'entry_id'  => $lastentryid,						'ledger_id' => 31,				//Interest income						'dc'        => 'C',						'amount'    => $linfo->LH_InterestAmt					);					$this->db->insert("entry_items", $entry);					$cr+=$linfo->LH_InterestAmt;				endif;				if( $linfo->LH_CollFee ):					$entry = array(						'entry_id'  => $lastentryid,						'ledger_id' => 110,				// Other charges						'dc'        => 'C',						'amount'    => $linfo->LH_CollFee					);					$this->db->insert("entry_items", $entry);					$cr+=$linfo->LH_CollFee;				endif;				if( $linfo->LH_OBC ):					$entry = array(						'entry_id'  => $lastentryid,						'ledger_id' => 4,				// Outstanding balance 						'dc'        => 'C',				// Notes Receivable						'amount'    => $linfo->LH_OBC					);					$this->db->insert("entry_items", $entry);					$cr+=$linfo->LH_OBC;				endif;				if( $linfo->LH_NetProceeds ):					$ledgerid = $this->rsm->chartaccount_id( $_POST['a6'] );					$entry = array(						'entry_id'  => $lastentryid,	// Cash in Bank						'ledger_id' => $ledgerid,						'dc'        => 'C',						'amount'    => $linfo->LH_NetProceeds					);					$this->db->insert("entry_items", $entry);					$cr+=$linfo->LH_NetProceeds;				endif;								$datas = array(					'id'		 => $lastentryid,					'entry_type' => 3,					// Sales book					'number'     => $this->rsm->get_entry_number( 3 ),					'date'       => $now,					'dr_total'   => $dr,					'cr_total'   => $cr,					'narration'  => "NET PROCEEDS OF LOAN\r".									$this->rsm->get_loantrans( $trans )				);				$this->db->insert("entries", $datas) or die( $this->db->_error_message() );			endif;				}		$this->db->trans_complete();				die(trims("			<script>				window.parent.document.location.href='checkvoucher';			</script>		"));		return;	} 		function documents()	{		$clientid = $this->uri->segment(3, '');		$loanid = $this->uri->segment(4, '');		$param[''] = '';		if($clientid&&$loanid)		{			$param['datas'] = $this->db->query(				"SELECT * FROM ln_hdr WHERE CI_AcctNo='$clientid' AND LH_PN='$loanid';			")->result_array();		}		$this->load->view("sales/print/documents", $param);		return;	}	function cvsales()	{		$param['payee'] = $_REQUEST['payee'];		$param['cvno'] = $_REQUEST['cvno'];		$param['date'] = $_REQUEST['date'];		$param['ckno'] = $_REQUEST['ckno'];		$param['amt'] = $_REQUEST['amt'];		$this->load->view("sales/print/cvsales", $param);		return;	}	/* Client Ledger Posting */	function ledger() {		$clientid = $this->uri->segment(3, '');		$loanid = $this->uri->segment(4, '');		$param['loanid'] = $loanid;		$param['datas'] = '';		$param['ledger'] = '';		if($clientid&&$loanid)		{			$param['datas'] = $this->db->query(				"SELECT * FROM ln_hdr WHERE CI_AcctNo='$clientid' AND LH_PN='$loanid';			")->result_array();						$param['pn'] = $this->db->query(				"SELECT LH_PN FROM ln_hdr WHERE CI_AcctNo='$clientid' AND LH_LoanTrans!='SPEC' AND LH_IsPending='0' AND LH_Processed='1';			")->result_array();						$param['ledger'] = $this->db->query(				"SELECT * FROM ln_ldgr 				WHERE CI_AcctNo='$clientid' 				AND LH_PN='$loanid' 				ORDER BY ID, LL_PaymentDate ASC;			")->result_array();		}				$this->load->view("sales/list/ledger", $param);		return;	}		/* Test Page */	function client() {		$this->load->view("sales/form/client");		return;	}	}